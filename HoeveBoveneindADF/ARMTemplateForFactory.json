{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "HoeveBoveneindADF"
		},
		"DWH_Hoeve_boveneind_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'DWH_Hoeve_boveneind'"
		},
		"New_Postgre_SQL_DWH_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'New_Postgre_SQL_DWH'"
		},
		"errorlogblob_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'errorlogblob'"
		},
		"Nedap_API_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://api.nedap-bi.com/v1/"
		},
		"boveneindkeyvaultt_access_token_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://boveneindkeyvault.vault.azure.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Hoeve Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Cows To Staging",
						"description": "Empties the staging nedapcowid and gets the current livestock on hoeve_boveneind",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "execute_refresh_token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"preCopyScript": "truncate staging.nedapcowid\n",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['id']"
										},
										"sink": {
											"name": "id",
											"type": "Int64"
										}
									},
									{
										"source": {
											"path": "[['condition']"
										},
										"sink": {
											"name": "condition",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['group_id']"
										},
										"sink": {
											"name": "group_id",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "[['life_number']"
										},
										"sink": {
											"name": "life_number",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['responder1']"
										},
										"sink": {
											"name": "responder1",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['responder2']"
										},
										"sink": {
											"name": "responder2",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['responder3']"
										},
										"sink": {
											"name": "responder3",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['number']"
										},
										"sink": {
											"name": "number",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "[['uuid']"
										},
										"sink": {
											"name": "uuid",
											"type": "String"
										}
									}
								],
								"collectionReference": "$['animals']",
								"mapComplexValuesToString": false
							}
						},
						"inputs": [
							{
								"referenceName": "API_GetCows",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "table_staging_nedapcowid",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "For Every Cow",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy Cows To Staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "view_staging_CowIDView",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Get Facts To Staging",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "For Every Cow",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "start_date",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "end_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('For Every Cow').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Behaviour per cow",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 1,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:03:00",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "AzurePostgreSQLSink",
											"writeBatchSize": 1000000,
											"writeBatchTimeout": "00:30:00",
											"writeMethod": "CopyCommand"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "[['animal_id']"
													},
													"sink": {
														"name": "animal_id",
														"type": "Int64"
													}
												},
												{
													"source": {
														"path": "[['start_time']"
													},
													"sink": {
														"name": "start_time",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"path": "[['type']"
													},
													"sink": {
														"name": "type",
														"type": "Int32"
													}
												},
												{
													"source": {
														"path": "[['duration']"
													},
													"sink": {
														"name": "duration",
														"type": "Int32"
													}
												},
												{
													"source": {
														"path": "$['status']"
													},
													"sink": {
														"name": "status",
														"type": "Int32"
													}
												}
											],
											"collectionReference": "$['period_behaviours']"
										}
									},
									"inputs": [
										{
											"referenceName": "API_GetCowBehaviour",
											"type": "DatasetReference",
											"parameters": {
												"id": "@item().id",
												"start_date": {
													"value": "@variables('start_date')",
													"type": "Expression"
												},
												"end_date": {
													"value": "@variables('end_date')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "table_staging_nedapcowbehaviour",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Lying per cow",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 1,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:03:00",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "AzurePostgreSQLSink",
											"writeBatchSize": 1000000,
											"writeBatchTimeout": "00:30:00",
											"writeMethod": "CopyCommand"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "[['animal_id']"
													},
													"sink": {
														"name": "animal_id",
														"type": "Int64"
													}
												},
												{
													"source": {
														"path": "[['quarter']"
													},
													"sink": {
														"name": "quarter",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"path": "[['total']"
													},
													"sink": {
														"name": "total",
														"type": "Int32"
													}
												},
												{
													"source": {
														"path": "$['status']"
													},
													"sink": {
														"name": "status",
														"type": "Int32"
													}
												}
											],
											"collectionReference": "$['lying_quarters']"
										}
									},
									"inputs": [
										{
											"referenceName": "API_GetCowLying",
											"type": "DatasetReference",
											"parameters": {
												"id": "@item().id",
												"start_date": {
													"value": "@variables('start_date')",
													"type": "Expression"
												},
												"end_date": {
													"value": "@variables('end_date')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "table_staging_nedapcowlying",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Standing per cow",
									"description": "truncate staging.\"Cow Standing\"",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 1,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:03:00",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "AzurePostgreSQLSink",
											"writeBatchSize": 1000000,
											"writeBatchTimeout": "00:30:00",
											"writeMethod": "CopyCommand"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "[['animal_id']"
													},
													"sink": {
														"name": "animal_id",
														"type": "Int64"
													}
												},
												{
													"source": {
														"path": "[['quarter']"
													},
													"sink": {
														"name": "quarter",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"path": "[['total']"
													},
													"sink": {
														"name": "total",
														"type": "Int32"
													}
												},
												{
													"source": {
														"path": "$['status']"
													},
													"sink": {
														"name": "status",
														"type": "Int32"
													}
												}
											],
											"collectionReference": "$['standing_quarters']"
										}
									},
									"inputs": [
										{
											"referenceName": "API_GetCowStanding",
											"type": "DatasetReference",
											"parameters": {
												"id": "@item().id",
												"start_date": {
													"value": "@variables('start_date')",
													"type": "Expression"
												},
												"end_date": {
													"value": "@variables('end_date')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "table_staging_nedapcowstanding",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Standups per cow",
									"description": "truncate public.\"Cow Standups\"",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 1,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:03:00",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "AzurePostgreSQLSink",
											"writeBatchSize": 1000000,
											"writeBatchTimeout": "00:30:00",
											"writeMethod": "CopyCommand"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "[['animal_id']"
													},
													"sink": {
														"name": "animal_id",
														"type": "Int64"
													}
												},
												{
													"source": {
														"path": "[['quarter']"
													},
													"sink": {
														"name": "quarter",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"path": "[['total']"
													},
													"sink": {
														"name": "total",
														"type": "Int32"
													}
												},
												{
													"source": {
														"path": "$['status']"
													},
													"sink": {
														"name": "status",
														"type": "Int32"
													}
												}
											],
											"collectionReference": "$['standups_quarters']"
										}
									},
									"inputs": [
										{
											"referenceName": "API_GetCowStandups",
											"type": "DatasetReference",
											"parameters": {
												"id": "@item().id",
												"start_date": {
													"value": "@variables('start_date')",
													"type": "Expression"
												},
												"end_date": {
													"value": "@variables('end_date')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "table_staging_nedapcowstandups",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Walking per cow",
									"description": "truncate staging.\"nedapcowwalking\"",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 1,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:03:00",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "AzurePostgreSQLSink",
											"writeBatchSize": 1000000,
											"writeBatchTimeout": "00:30:00",
											"writeMethod": "CopyCommand"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "[['animal_id']"
													},
													"sink": {
														"name": "animal_id",
														"type": "Int64"
													}
												},
												{
													"source": {
														"path": "[['quarter']"
													},
													"sink": {
														"name": "quarter",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"path": "[['total']"
													},
													"sink": {
														"name": "total",
														"type": "Int32"
													}
												},
												{
													"source": {
														"path": "$['status']"
													},
													"sink": {
														"name": "status",
														"type": "Int32"
													}
												}
											],
											"collectionReference": "$['walking_quarters']"
										}
									},
									"inputs": [
										{
											"referenceName": "API_GetCowWalking",
											"type": "DatasetReference",
											"parameters": {
												"id": "@item().id",
												"start_date": {
													"value": "@variables('start_date')",
													"type": "Expression"
												},
												"end_date": {
													"value": "@variables('end_date')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "table_staging_nedapcowwalking",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Neck Activity per cow",
									"description": "truncate staging.\"nedapcowactivityneck\"",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 1,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:03:00",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "AzurePostgreSQLSink",
											"writeBatchSize": 1000000,
											"writeBatchTimeout": "00:30:00",
											"writeMethod": "CopyCommand"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "[['animal_id']"
													},
													"sink": {
														"name": "animal_id",
														"type": "Int64"
													}
												},
												{
													"source": {
														"path": "[['quarter']"
													},
													"sink": {
														"name": "quarter",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"path": "[['total']"
													},
													"sink": {
														"name": "total",
														"type": "Int32"
													}
												},
												{
													"source": {
														"path": "$['status']"
													},
													"sink": {
														"name": "status",
														"type": "Int32"
													}
												}
											],
											"collectionReference": "$['neck_activity_quarters']"
										}
									},
									"inputs": [
										{
											"referenceName": "API_GetCowNeckActivity",
											"type": "DatasetReference",
											"parameters": {
												"id": "@item().id",
												"start_date": {
													"value": "@variables('start_date')",
													"type": "Expression"
												},
												"end_date": {
													"value": "@variables('end_date')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "table_staging_nedapcowactivityneck",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "steps per cow",
									"description": "truncate staging.\"nedapcoweating\"",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 1,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:03:00",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "AzurePostgreSQLSink",
											"writeBatchSize": 1000000,
											"writeBatchTimeout": "00:30:00",
											"writeMethod": "CopyCommand"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "animal_id"
													},
													"sink": {
														"name": "animal_id",
														"type": "Int64"
													}
												},
												{
													"source": {
														"path": "quarter"
													},
													"sink": {
														"name": "quarter",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"path": "total"
													},
													"sink": {
														"name": "total",
														"type": "Int32"
													}
												},
												{
													"source": {
														"path": "$['status']"
													},
													"sink": {
														"name": "status",
														"type": "Int32"
													}
												}
											],
											"collectionReference": "$['steps_quarters']"
										}
									},
									"inputs": [
										{
											"referenceName": "API_GetCowSteps",
											"type": "DatasetReference",
											"parameters": {
												"id": "@item().id",
												"start_date": "@variables('start_date')",
												"end_date": "@variables('end_date')"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "table_staging_nedapcowsteps",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Eating per cow",
									"description": "truncate staging.\"nedapcoweating\"",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 1,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:03:00",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "AzurePostgreSQLSink",
											"writeBatchSize": 1000000,
											"writeBatchTimeout": "00:30:00",
											"writeMethod": "CopyCommand"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "$['eating_summaries'][0]['animal_id']"
													},
													"sink": {
														"name": "animal_id",
														"type": "Int64"
													}
												},
												{
													"source": {
														"path": "$['eating_summaries'][0]['date']"
													},
													"sink": {
														"name": "date",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"path": "$['eating_summaries'][0]['total']"
													},
													"sink": {
														"name": "total",
														"type": "Int32"
													}
												},
												{
													"source": {
														"path": "$['eating_summaries'][0]['average']"
													},
													"sink": {
														"name": "average",
														"type": "Int32"
													}
												},
												{
													"source": {
														"path": "$['eating_summaries'][0]['attention']"
													},
													"sink": {
														"name": "attention",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['status']"
													},
													"sink": {
														"name": "status",
														"type": "Int32"
													}
												}
											],
											"collectionReference": "$['day_summaries']"
										}
									},
									"inputs": [
										{
											"referenceName": "API_GetCowEating",
											"type": "DatasetReference",
											"parameters": {
												"id": "@item().id",
												"start_date": {
													"value": "@variables('start_date')",
													"type": "Expression"
												},
												"end_date": {
													"value": "@variables('end_date')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "table_staging_nedapcoweating",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Heat_detection",
									"description": "",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 1,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:03:00",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "AzurePostgreSQLSink",
											"writeBatchSize": 1000000,
											"writeBatchTimeout": "00:30:00",
											"writeMethod": "CopyCommand"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "[['animal_id']"
													},
													"sink": {
														"name": "animal_id",
														"type": "Int64"
													}
												},
												{
													"source": {
														"path": "[['start_date']"
													},
													"sink": {
														"name": "start_date",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"path": "[['end_date']"
													},
													"sink": {
														"name": "end_date",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"path": "[['x_factor']"
													},
													"sink": {
														"name": "x_factor",
														"type": "Double"
													}
												},
												{
													"source": {
														"path": "[['attentions']['increased']"
													},
													"sink": {
														"name": "attentions_increased",
														"type": "Boolean"
													}
												},
												{
													"source": {
														"path": "[['attentions']['suspicious']"
													},
													"sink": {
														"name": "attentions_suspicious",
														"type": "Boolean"
													}
												},
												{
													"source": {
														"path": "[['label_type']"
													},
													"sink": {
														"name": "label_type",
														"type": "Int64"
													}
												},
												{
													"source": {
														"path": "$['status']"
													},
													"sink": {
														"name": "status",
														"type": "Int32"
													}
												}
											],
											"collectionReference": "$['activity_data']"
										}
									},
									"inputs": [
										{
											"referenceName": "API_GetHeatData",
											"type": "DatasetReference",
											"parameters": {
												"id": "@item().id",
												"start_date": "@variables('start_date')",
												"end_date": "@variables('end_date')"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "table_staging_nedapheatdetection",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Truncate Staging",
						"description": "Empties staging tables ",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Facts To DWH",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "truncate staging.nedapcowid;\ntruncate staging.nedapcowactivityneck;\ntruncate staging.nedapcowactivityleg;\ntruncate staging.nedapcowbehaviour;\ntruncate staging.nedapcoweating;\ntruncate staging.nedapcowlying;\ntruncate staging.nedapcowstanding;\ntruncate staging.nedapcowstandups;\ntruncate staging.nedapcowsteps;\ntruncate staging.nedapcowwalking;\ntruncate staging.nedaplocationdata;\ntruncate staging.geamelkrobot;\n\nselect 0 id;",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "table_staging_nedapcowactivityneck",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "execute_refresh_token",
						"description": "executes the \"refresh_access_token\" pipeline so we have a fresh access token",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "refresh_acces_token",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Get Facts To DWH",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Get Facts To Staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "V2 Update Facts Dataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"NeckActivityStaging": {},
									"EatingStaging": {},
									"BehaviourStaging": {},
									"MilkingStaging": {},
									"LocationStaging": {},
									"lyingStaging": {},
									"StandingStaging": {},
									"WalkingStaging": {},
									"StandupsStaging": {},
									"StepsStaging": {},
									"NeckActivityDWH": {},
									"EatingDWH": {},
									"BehaviourDWH": {},
									"MilkingDWH": {},
									"LocationDWH": {},
									"LegActivityDWH": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 16,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "start_date",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "start_date",
							"value": {
								"value": "@addDays(startOfDay(utcnow()), -4)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "end_date",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "end_date",
							"value": {
								"value": "@addDays(startOfDay(utcnow()), 0)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"start_date": {
						"type": "String"
					},
					"end_date": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-10-20T14:58:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/API_GetCows')]",
				"[concat(variables('factoryId'), '/datasets/table_staging_nedapcowid')]",
				"[concat(variables('factoryId'), '/datasets/view_staging_CowIDView')]",
				"[concat(variables('factoryId'), '/datasets/table_staging_nedapcowactivityneck')]",
				"[concat(variables('factoryId'), '/pipelines/refresh_acces_token')]",
				"[concat(variables('factoryId'), '/dataflows/V2 Update Facts Dataflow')]",
				"[concat(variables('factoryId'), '/datasets/API_GetCowBehaviour')]",
				"[concat(variables('factoryId'), '/datasets/table_staging_nedapcowbehaviour')]",
				"[concat(variables('factoryId'), '/datasets/API_GetCowLying')]",
				"[concat(variables('factoryId'), '/datasets/table_staging_nedapcowlying')]",
				"[concat(variables('factoryId'), '/datasets/API_GetCowStanding')]",
				"[concat(variables('factoryId'), '/datasets/table_staging_nedapcowstanding')]",
				"[concat(variables('factoryId'), '/datasets/API_GetCowStandups')]",
				"[concat(variables('factoryId'), '/datasets/table_staging_nedapcowstandups')]",
				"[concat(variables('factoryId'), '/datasets/API_GetCowWalking')]",
				"[concat(variables('factoryId'), '/datasets/table_staging_nedapcowwalking')]",
				"[concat(variables('factoryId'), '/datasets/API_GetCowNeckActivity')]",
				"[concat(variables('factoryId'), '/datasets/API_GetCowSteps')]",
				"[concat(variables('factoryId'), '/datasets/table_staging_nedapcowsteps')]",
				"[concat(variables('factoryId'), '/datasets/API_GetCowEating')]",
				"[concat(variables('factoryId'), '/datasets/table_staging_nedapcoweating')]",
				"[concat(variables('factoryId'), '/datasets/API_GetHeatData')]",
				"[concat(variables('factoryId'), '/datasets/table_staging_nedapheatdetection')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Update_Cows')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "new_cows",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy Cows To Staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "V2 new_cows",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StagingCows": {},
									"DWHCows": {},
									"SetCowNew1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Truncate Staging",
						"description": "Empties staging tables ",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "V2 Update Cows no update",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzurePostgreSqlSource",
								"query": "truncate staging.nedapcowid;\nselect 0 id;",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "table_staging_nedapcowactivityneck",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "execute_refresh_token",
						"description": "executes the \"refresh_access_token\" pipeline so we have a fresh access token",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "refresh_acces_token",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Copy Cows To Staging",
						"description": "Empties the staging nedapcowid and gets the current livestock on hoeve_boveneind",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "execute_refresh_token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzurePostgreSQLSink",
								"writeBatchSize": 1000000,
								"writeBatchTimeout": "00:30:00",
								"preCopyScript": "truncate staging.nedapcowid\n",
								"writeMethod": "CopyCommand"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['id']"
										},
										"sink": {
											"name": "id",
											"type": "Int64"
										}
									},
									{
										"source": {
											"path": "[['condition']"
										},
										"sink": {
											"name": "condition",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['group_id']"
										},
										"sink": {
											"name": "group_id",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "[['life_number']"
										},
										"sink": {
											"name": "life_number",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['responder1']"
										},
										"sink": {
											"name": "responder1",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['responder2']"
										},
										"sink": {
											"name": "responder2",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['responder3']"
										},
										"sink": {
											"name": "responder3",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['number']"
										},
										"sink": {
											"name": "number",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "[['uuid']"
										},
										"sink": {
											"name": "uuid",
											"type": "String"
										}
									}
								],
								"collectionReference": "$['animals']",
								"mapComplexValuesToString": false
							}
						},
						"inputs": [
							{
								"referenceName": "API_GetCows",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "table_staging_nedapcowid",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "removed_cows",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "new_cows",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "V2 removed_cows",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StagingCows": {},
									"DWHCows": {},
									"SetCowEnddate1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "update cows end_date",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "removed_cows",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "V2 Update Cows update available end_date",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StagingCows": {},
									"DWHCows": {},
									"SetCowEnddate3": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "update cows set new date",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "update cows end_date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "V2 Update Cows update available set new cow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StagingCows": {},
									"DWHCows": {},
									"SetCowNew3": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "V2 Update Cows no update",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "update cows set new date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "V2 Update Cows no update",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StagingCows": {},
									"DWHCows": {},
									"UpdateCowLastUpdated": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"start_date": {
						"type": "String"
					},
					"end_date": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-10-20T14:58:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/V2 new_cows')]",
				"[concat(variables('factoryId'), '/datasets/table_staging_nedapcowactivityneck')]",
				"[concat(variables('factoryId'), '/pipelines/refresh_acces_token')]",
				"[concat(variables('factoryId'), '/datasets/API_GetCows')]",
				"[concat(variables('factoryId'), '/datasets/table_staging_nedapcowid')]",
				"[concat(variables('factoryId'), '/dataflows/V2 removed_cows')]",
				"[concat(variables('factoryId'), '/dataflows/V2 Update Cows update available end_date')]",
				"[concat(variables('factoryId'), '/dataflows/V2 Update Cows update available set new cow')]",
				"[concat(variables('factoryId'), '/dataflows/V2 Update Cows no update')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/refresh_acces_token')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get_auth_code",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "get_refresh_token",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "get_client_id",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "get_client_secret",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://nedap-bi.com/oauth/token",
							"method": "POST",
							"headers": {
								"Content-Type": "application/x-www-form-urlencoded"
							},
							"body": {
								"value": "@concat('client_id=',string(activity('get_client_id').output.value),'&client_secret=',string(activity('get_client_secret').output.value),'&grant_type=refresh_token','&refresh_token=',string(activity('get_refresh_token').output.value))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "get_refresh_token",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://boveneindkeyvault.vault.azure.net/secrets/refresh-token?api-version=7.3",
							"method": "GET",
							"headers": {},
							"turnOffAsync": false,
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "get_client_id",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://boveneindkeyvault.vault.azure.net/secrets/client-id?api-version=7.3 ",
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "get_client_secret",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://boveneindkeyvault.vault.azure.net/secrets/client-secret?api-version=7.3",
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "update_acces_token",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "set access token variable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://boveneindkeyvault.vault.azure.net/secrets/access-token?api-version=7.3",
							"method": "PUT",
							"headers": {
								"content-type": "application/json"
							},
							"body": {
								"value": "@concat('{\"value\":', variables('push_access_token'),'}')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "update_refresh_token",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "set refresh token variable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://boveneindkeyvault.vault.azure.net//secrets/refresh-token?api-version=7.3",
							"method": "PUT",
							"headers": {
								"content-type": "application/json"
							},
							"body": {
								"value": "@concat('{\"value\":', variables('push_refresh_token'),'}')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "set refresh token variable",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "get_auth_code",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "push_refresh_token",
							"value": {
								"value": "@concat('\"', string(activity('get_auth_code').output.refresh_token),'\"')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "set access token variable",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "get_auth_code",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "push_access_token",
							"value": {
								"value": "@concat('\"','bearer ', string(activity('get_auth_code').output.access_token),'\"')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"refresh_token": {
						"type": "String"
					},
					"access_token": {
						"type": "String"
					},
					"get_authcode": {
						"type": "String"
					},
					"push_access_token": {
						"type": "String"
					},
					"push_refresh_token": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-06-24T19:20:49Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/API_GetCowBehaviour')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Nedap_API",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"id": {
						"type": "string"
					},
					"start_date": {
						"type": "string"
					},
					"end_date": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Nedap API"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@concat('https://api.nedap-bi.com/v1/behaviour/period_behaviour/animal/period_behaviour?animal_id=',dataset().id,'&start_date=',startOfDay(dataset().start_date),'&end_date=',startOfDay(dataset().end_date))",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Nedap_API')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/API_GetCowEating')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Nedap_API",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"id": {
						"type": "string"
					},
					"start_date": {
						"type": "string"
					},
					"end_date": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Nedap API"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@concat('https://api.nedap-bi.com/v1/behaviour/eating/animal/day_summaries?animal_id=',dataset().id,'&start_date=',startOfDay(dataset().start_date),'&end_date=',startOfDay(dataset().end_date))",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Nedap_API')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/API_GetCowLegActivity')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Nedap_API",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"id": {
						"type": "string"
					},
					"start_date": {
						"type": "string"
					},
					"end_date": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Nedap API"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@concat('https://api.nedap-bi.com/v1/behaviour/activity/animal/leg_quarter_data?animal_id=',dataset().id,'&start_date=',startOfDay(dataset().start_date),'&end_date=',startOfDay(dataset().end_date))",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Nedap_API')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/API_GetCowLying')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Nedap_API",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"id": {
						"type": "string"
					},
					"start_date": {
						"type": "string"
					},
					"end_date": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Nedap API"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@concat('https://api.nedap-bi.com/v1/behaviour/lying/animal/quarter_data?animal_id=',dataset().id,'&start_date=',startOfDay(dataset().start_date),'&end_date=',startOfDay(dataset().end_date))",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Nedap_API')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/API_GetCowNeckActivity')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Nedap_API",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"id": {
						"type": "string"
					},
					"start_date": {
						"type": "string"
					},
					"end_date": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Nedap API"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@concat('https://api.nedap-bi.com/v1/behaviour/activity/animal/neck_quarter_data?animal_id=',dataset().id,'&start_date=',startOfDay(dataset().start_date),'&end_date=',startOfDay(dataset().end_date))",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Nedap_API')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/API_GetCowStanding')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Nedap_API",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"id": {
						"type": "string"
					},
					"start_date": {
						"type": "string"
					},
					"end_date": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Nedap API"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@concat('https://api.nedap-bi.com/v1/behaviour/standing/animal/quarter_data?animal_id=',dataset().id,'&start_date=',startOfDay(dataset().start_date),'&end_date=',startOfDay(dataset().end_date))",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Nedap_API')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/API_GetCowStandups')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Nedap_API",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"id": {
						"type": "string"
					},
					"start_date": {
						"type": "string"
					},
					"end_date": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Nedap API"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@concat('https://api.nedap-bi.com/v1/behaviour/standups/animal/quarter_data?animal_id=',dataset().id,'&start_date=',startOfDay(dataset().start_date),'&end_date=',startOfDay(dataset().end_date))",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Nedap_API')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/API_GetCowSteps')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Nedap_API",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"id": {
						"type": "string"
					},
					"start_date": {
						"type": "string"
					},
					"end_date": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Nedap API"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@concat('https://api.nedap-bi.com/v1/behaviour/steps/animal/quarter_data?animal_id=',dataset().id,'&start_date=',startOfDay(dataset().start_date),'&end_date=',startOfDay(dataset().end_date))",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Nedap_API')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/API_GetCowWalking')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Nedap_API",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"id": {
						"type": "string"
					},
					"start_date": {
						"type": "string"
					},
					"end_date": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Nedap API"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@concat('https://api.nedap-bi.com/v1/behaviour/walking/animal/quarter_data?animal_id=',dataset().id,'&start_date=',startOfDay(dataset().start_date),'&end_date=',startOfDay(dataset().end_date))",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Nedap_API')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/API_GetCows')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Nedap_API",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nedap API"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": "https://api.nedap-bi.com/v1/animals/"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Nedap_API')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/API_GetHeatData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Nedap_API",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"id": {
						"type": "string"
					},
					"start_date": {
						"type": "string"
					},
					"end_date": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Nedap API"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@concat(' https://api.nedap-bi.com/v1/heat_detection/activity/animal/two_hour_data?animal_id=',dataset().id,'&start_date=',startOfDay(dataset().start_date),'&end_date=',startOfDay(dataset().end_date))",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Nedap_API')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/table_DWH_cow_behaviour')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Gegevensset.\n\nTabel: cow_behaviour uit postgresql database: dwh_hoeve_boveneind",
				"linkedServiceName": {
					"referenceName": "DWH_Hoeve_boveneind",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DWH Hoeve boveneind"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "dim_cow_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "dim_time_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "dim_date_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "type_of_behaviour",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "duration_behaviour",
						"type": "integer",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "warehouse",
					"table": "cow_behaviour"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DWH_Hoeve_boveneind')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/table_DWH_cow_eating')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Gegevensset.\n\nTabel: cow_eating uit postgresql database: dwh_hoeve_boveneind",
				"linkedServiceName": {
					"referenceName": "DWH_Hoeve_boveneind",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DWH Hoeve boveneind"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "dim_cow_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "dim_time_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "dim_date_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "total_eating_time",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "average_eating_time",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "attention_needed",
						"type": "boolean",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "warehouse",
					"table": "cow_eating"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DWH_Hoeve_boveneind')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/table_DWH_cow_location')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DWH_Hoeve_boveneind",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DWH Hoeve boveneind"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "dim_cow_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "dim_date_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "time",
						"type": "time without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "x_coordinate",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "y_coordinate",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "quality_position",
						"type": "integer",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "warehouse",
					"table": "cow_location"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DWH_Hoeve_boveneind')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/table_DWH_cow_milkings')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DWH_Hoeve_boveneind",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DWH Hoeve boveneind"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "dim_cow_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "dim_error_code_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "dim_time_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "dim_date_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "quarterconductbr",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "quarterconductbl",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "quarterconductfl",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "quarterconductfr",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "degreeofrednessbr",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "degreeofrednessbl",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "degreeofrednessfl",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "degreeofrednessfr",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "nrconnectattemptbr",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "nrconnectattemeptbl",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "nrconnectattemeptfl",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "nrconnectattemptfr",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "milkingtimeudderbr",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "milkingtimeudderbl",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "milkingtimeudderfl",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "milkingtimeudderfr",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "visitmilkamount",
						"type": "double precision",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "lactationdays",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "cowage",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "lactationnumer",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "milkingtimetotal",
						"type": "integer",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "warehouse",
					"table": "cow_milkings"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DWH_Hoeve_boveneind')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/table_DWH_dim_cow')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DWH_Hoeve_boveneind",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DWH Hoeve boveneind"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "dim_cow_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "lifenumber",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "leg_responder",
						"type": "bigint",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "neck_responder",
						"type": "bigint",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "cownumber",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "nedap_id",
						"type": "bigint",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "start_date",
						"type": "date",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "end_date",
						"type": "date",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "group",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "last_updated",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "warehouse",
					"table": "dim_cow"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DWH_Hoeve_boveneind')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/table_DWH_dim_date')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DWH_Hoeve_boveneind",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DWH Hoeve boveneind"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "dim_date_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "date",
						"type": "date",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "day",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "day_name",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "week",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "iso_week",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "day_of_week",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "month",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "month_name",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "quarter",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "year",
						"type": "integer",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "warehouse",
					"table": "dim_date"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DWH_Hoeve_boveneind')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/table_DWH_dim_time')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DWH_Hoeve_boveneind",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DWH Hoeve boveneind"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "dim_time_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "time",
						"type": "time without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "minute",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "hour",
						"type": "integer",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "warehouse",
					"table": "dim_time"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DWH_Hoeve_boveneind')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/table_DWH_leg_activity')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DWH_Hoeve_boveneind",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DWH Hoeve boveneind"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "dim_cow_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "dim_time_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "dim_date_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "total_time_lying",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "total_time_standing",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "total_time_walking",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "total_standups",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "total_steps",
						"type": "integer",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "warehouse",
					"table": "cow_leg_activity"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DWH_Hoeve_boveneind')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/table_DWH_neck_activity')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DWH_Hoeve_boveneind",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "DWH Hoeve boveneind"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "dim_cow_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "dim_time_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "dim_date_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "total_neck_movements",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "total_time_eating",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "total_time_ruminating",
						"type": "integer",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "warehouse",
					"table": "cow_neck_activity"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DWH_Hoeve_boveneind')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/table_staging_geamelkrobot')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DWH_Hoeve_boveneind",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "staging"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "koenummer",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "lactatienummer",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "Kwartier geleidbaarheid ruwe waarde rechts achter",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "Kwartier geleidbaarheid ruwe waarde links achter",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "Kwartier geleidbaarheid ruwe waarde links voor",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "Kwartier geleidbaarheid ruwe waarde rechts voor",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "Robotbezoek datetime",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "lactatiedagen",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "respondernummer",
						"type": "bigint",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "Aantal beker aansluitpogingen rechts achter",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "Aantal beker aansluitpogingen links achter",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "Aantal beker aansluitpogingen links voor",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "Aantal beker aansluitpogingen rechts voor",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "melkduur",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "Melkstroomherkenningstijd lv",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "Melkstroomherkenningstijd rv",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "Melkstroomherkenningstijd la",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "Melkstroomherkenningstijd ra",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "melkhoeveelheid",
						"type": "real",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "Error code",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "koeleeftijd",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "Roodheidsgraad achter rechts",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "Roodheidsgraad achter links",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "Roodheidsgraad vooraan links",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "Roodheidsgraad vooraan rechts",
						"type": "integer",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "staging",
					"table": "geamelkrobot"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DWH_Hoeve_boveneind')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/table_staging_nedapcowactivityleg')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DWH_Hoeve_boveneind",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "staging"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "animal_id",
						"type": "bigint",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "quarter",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "total",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "status",
						"type": "integer",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "staging",
					"table": "nedapcowactivityleg"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DWH_Hoeve_boveneind')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/table_staging_nedapcowactivityneck')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DWH_Hoeve_boveneind",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "staging"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "animal_id",
						"type": "bigint",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "quarter",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "total",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "status",
						"type": "integer",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "staging",
					"table": "nedapcowactivityneck"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DWH_Hoeve_boveneind')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/table_staging_nedapcowbehaviour')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DWH_Hoeve_boveneind",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "staging"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "animal_id",
						"type": "bigint",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "start_time",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "type",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "duration",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "status",
						"type": "integer",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "staging",
					"table": "nedapcowbehaviour"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DWH_Hoeve_boveneind')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/table_staging_nedapcoweating')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DWH_Hoeve_boveneind",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "staging"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "animal_id",
						"type": "bigint",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "date",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "quarters",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "average",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "attention",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "status",
						"type": "integer",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "staging",
					"table": "nedapcoweating"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DWH_Hoeve_boveneind')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/table_staging_nedapcowid')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DWH_Hoeve_boveneind",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "staging"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "bigint",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "condition",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "life_number",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "responder1",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "responder2",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "responder3",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "number",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "uuid",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "group_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "staging",
					"table": "nedapcowid"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DWH_Hoeve_boveneind')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/table_staging_nedapcowlying')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DWH_Hoeve_boveneind",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "staging"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "staging",
					"table": "nedapcowlying"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DWH_Hoeve_boveneind')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/table_staging_nedapcowstanding')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DWH_Hoeve_boveneind",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "staging"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "animal_id",
						"type": "bigint",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "total",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "quarter",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "status",
						"type": "integer",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "staging",
					"table": "nedapcowstanding"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DWH_Hoeve_boveneind')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/table_staging_nedapcowstandups')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DWH_Hoeve_boveneind",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "staging"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "animal_id",
						"type": "bigint",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "total",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "quarter",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "status",
						"type": "integer",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "staging",
					"table": "nedapcowstandups"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DWH_Hoeve_boveneind')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/table_staging_nedapcowsteps')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DWH_Hoeve_boveneind",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "staging"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "animal_id",
						"type": "bigint",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "total",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "quarter",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "status",
						"type": "integer",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "staging",
					"table": "nedapcowsteps"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DWH_Hoeve_boveneind')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/table_staging_nedapcowwalking')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DWH_Hoeve_boveneind",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "staging"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "animal_id",
						"type": "bigint",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "total",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "quarter",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "status",
						"type": "integer",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "staging",
					"table": "nedapcowwalking"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DWH_Hoeve_boveneind')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/table_staging_nedapheatdetection')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DWH_Hoeve_boveneind",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "staging"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "animal_id",
						"type": "bigint",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "quarter",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "total",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "status",
						"type": "integer",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "staging",
					"table": "nedapheatdetection"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DWH_Hoeve_boveneind')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/table_staging_nedaplocationdata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DWH_Hoeve_boveneind",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "staging"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "timestamp",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "responder",
						"type": "bigint",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "x",
						"type": "bigint",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "y",
						"type": "bigint",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "quality",
						"type": "bigint",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "staging",
					"table": "nedaplocationdata"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DWH_Hoeve_boveneind')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/view_staging_CowIDView')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DWH_Hoeve_boveneind",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "staging"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "bigint",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "staging",
					"table": "CowIDView"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DWH_Hoeve_boveneind')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/view_staging_StagingCowView')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DWH_Hoeve_boveneind",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "staging"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "bigint",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "condition",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "life_number",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "responder1",
						"type": "bigint",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "responder2",
						"type": "bigint",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "responder3",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "number",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "uuid",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "group_id",
						"type": "integer",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "staging",
					"table": "StagingCowView"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DWH_Hoeve_boveneind')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DWH_Hoeve_boveneind')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Datawarehouse hoeve boveneind",
				"annotations": [],
				"type": "AzurePostgreSql",
				"typeProperties": {
					"connectionString": "[parameters('DWH_Hoeve_boveneind_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Nedap_API')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('Nedap_API_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous",
					"authHeaders": {
						"Authorization": {
							"type": "AzureKeyVaultSecret",
							"store": {
								"referenceName": "boveneindkeyvaultt_access_token",
								"type": "LinkedServiceReference"
							},
							"secretName": "access-token"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/boveneindkeyvaultt_access_token')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/New_Postgre_SQL_DWH')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "New Postgresql DWH and staging",
				"annotations": [],
				"type": "AzurePostgreSql",
				"typeProperties": {
					"connectionString": "[parameters('New_Postgre_SQL_DWH_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/boveneindkeyvaultt_access_token')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('boveneindkeyvaultt_access_token_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/errorlogblob')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('errorlogblob_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Hoeve Trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Triggers the Hoeve Pipeline every 4 days.",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Hoeve Pipeline",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 4,
						"startTime": "2022-02-27T06:00:00",
						"timeZone": "W. Europe Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Hoeve Pipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/daily_trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Update_Cows",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-12-09T19:11:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								1
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Update_Cows')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V2 DWH Lookup Behaviour Flowlet')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Flowlet",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "DWH_Hoeve_boveneind",
								"type": "LinkedServiceReference"
							},
							"name": "DimTime"
						},
						{
							"linkedService": {
								"referenceName": "DWH_Hoeve_boveneind",
								"type": "LinkedServiceReference"
							},
							"name": "DimDate"
						},
						{
							"linkedService": {
								"referenceName": "DWH_Hoeve_boveneind",
								"type": "LinkedServiceReference"
							},
							"name": "DimCows"
						}
					],
					"sinks": [],
					"transformations": [
						{
							"name": "CowLookup",
							"description": "Voegt data staging area samen met bron: DWHValidCows en filtert op koeien waarvan de animal_id gelijk is aan het nedapid.\n\n"
						},
						{
							"name": "SplitDatetime"
						},
						{
							"name": "TimeLookup"
						},
						{
							"name": "DateLookup"
						},
						{
							"name": "NullFilter"
						},
						{
							"name": "activeDBcows"
						},
						{
							"name": "CowBehaviourStaging",
							"description": "Staging area data cow behaviour"
						},
						{
							"name": "CowBehaviour"
						}
					],
					"scriptLines": [
						"input(output(",
						"          animal_id as long,",
						"          start_time as timestamp,",
						"          type as integer,",
						"          duration as integer,",
						"          status as integer",
						"     ),",
						"     order: 0) ~> CowBehaviourStaging",
						"source(output(",
						"          dim_time_id as integer,",
						"          time as timestamp,",
						"          minute as integer,",
						"          hour as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'dim_time',",
						"     schemaName: 'warehouse',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> DimTime",
						"source(output(",
						"          dim_date_id as integer,",
						"          date as date,",
						"          day as integer,",
						"          day_name as string,",
						"          week as integer,",
						"          iso_week as integer,",
						"          day_of_week as integer,",
						"          month as integer,",
						"          month_name as string,",
						"          quarter as integer,",
						"          year as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'dim_date',",
						"     schemaName: 'warehouse',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> DimDate",
						"source(output(",
						"          dim_cow_id as integer,",
						"          lifenumber as string,",
						"          leg_responder as long,",
						"          neck_responder as long,",
						"          cownumber as integer,",
						"          nedap_id as long,",
						"          start_date as date,",
						"          end_date as date,",
						"          group as integer,",
						"          last_updated as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'dim_cow',",
						"     schemaName: 'warehouse',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> DimCows",
						"CowBehaviourStaging, activeDBcows lookup(animal_id == nedap_id,",
						"     multiple: true,",
						"     broadcast: 'right',",
						"     pickup: 'any')~> CowLookup",
						"CowLookup derive({time calc} = trim(split(toString(start_time),' ')[2]),",
						"          {date calc} = trim(split(toString(start_time),' ')[1])) ~> SplitDatetime",
						"SplitDatetime, DimTime lookup({time calc} == trim(split(toString(time),' ')[2]),",
						"     multiple: true,",
						"     broadcast: 'right')~> TimeLookup",
						"TimeLookup, DimDate lookup({date calc} == toString(date),",
						"     multiple: true,",
						"     broadcast: 'right')~> DateLookup",
						"DateLookup filter(isNull(dim_cow_id) == false() && isNull(dim_date_id) == false() && isNull(dim_time_id) == false()) ~> NullFilter",
						"DimCows filter(isNull(end_date) == true()) ~> activeDBcows",
						"NullFilter output(mapColumn(",
						"          dim_cow_id,",
						"          dim_time_id,",
						"          dim_date_id,",
						"          type,",
						"          duration",
						"     )) ~> CowBehaviour"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DWH_Hoeve_boveneind')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V2 DWH Lookup Eating Flowlet')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy of DWHLookupFlowlet ",
				"type": "Flowlet",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "DWH_Hoeve_boveneind",
								"type": "LinkedServiceReference"
							},
							"name": "DimDate"
						},
						{
							"linkedService": {
								"referenceName": "DWH_Hoeve_boveneind",
								"type": "LinkedServiceReference"
							},
							"name": "DimTime"
						},
						{
							"linkedService": {
								"referenceName": "DWH_Hoeve_boveneind",
								"type": "LinkedServiceReference"
							},
							"name": "DimCows"
						}
					],
					"sinks": [],
					"transformations": [
						{
							"name": "CowLookup"
						},
						{
							"name": "DateLookup"
						},
						{
							"name": "TimeLookup"
						},
						{
							"name": "SplitDateTime"
						},
						{
							"name": "NullFilter"
						},
						{
							"name": "DatatypeConversie"
						},
						{
							"name": "activeDBcow"
						},
						{
							"name": "CowEatingStaging"
						},
						{
							"name": "CowEating"
						}
					],
					"scriptLines": [
						"input(output(",
						"          animal_id as long,",
						"          date as timestamp,",
						"          total as integer,",
						"          average as integer,",
						"          attention as string",
						"     ),",
						"     order: 0) ~> CowEatingStaging",
						"source(output(",
						"          dim_date_id as integer,",
						"          date as date,",
						"          day as integer,",
						"          day_name as string,",
						"          week as integer,",
						"          iso_week as integer,",
						"          day_of_week as integer,",
						"          month as integer,",
						"          month_name as string,",
						"          quarter as integer,",
						"          year as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'dim_date',",
						"     schemaName: 'warehouse',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> DimDate",
						"source(output(",
						"          dim_time_id as integer,",
						"          time as timestamp,",
						"          minute as integer,",
						"          hour as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'dim_time',",
						"     schemaName: 'warehouse',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> DimTime",
						"source(output(",
						"          dim_cow_id as integer,",
						"          lifenumber as string,",
						"          leg_responder as long,",
						"          neck_responder as long,",
						"          cownumber as integer,",
						"          nedap_id as long,",
						"          start_date as date,",
						"          end_date as date,",
						"          group as integer,",
						"          last_updated as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'dim_cow',",
						"     schemaName: 'warehouse',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> DimCows",
						"CowEatingStaging, activeDBcow lookup(animal_id == nedap_id,",
						"     multiple: true,",
						"     broadcast: 'right')~> CowLookup",
						"SplitDateTime, DimDate lookup(DateCalc == toString(DimDate@date),",
						"     multiple: true,",
						"     broadcast: 'right')~> DateLookup",
						"DateLookup, DimTime lookup(TimeCalc == trim(split(toString(time),' ')[2]),",
						"     multiple: true,",
						"     broadcast: 'right')~> TimeLookup",
						"DatatypeConversie derive(DateCalc = trim(split(toString(date),' ')[1]),",
						"          TimeCalc = trim(split(toString(date),' ')[2])) ~> SplitDateTime",
						"TimeLookup filter(isNull(dim_cow_id) == false() && isNull(dim_date_id) == false() && isNull(dim_time_id) == false()) ~> NullFilter",
						"CowLookup derive(attention = toBoolean(attention)) ~> DatatypeConversie",
						"DimCows filter(isNull(end_date) == true()) ~> activeDBcow",
						"NullFilter output(mapColumn(",
						"          total,",
						"          average,",
						"          attention,",
						"          dim_cow_id,",
						"          dim_date_id,",
						"          dim_time_id",
						"     )) ~> CowEating"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DWH_Hoeve_boveneind')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V2 DWH Lookup Leg Activity Flowlet')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Flowlet",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "DWH_Hoeve_boveneind",
								"type": "LinkedServiceReference"
							},
							"name": "DimDate"
						},
						{
							"linkedService": {
								"referenceName": "DWH_Hoeve_boveneind",
								"type": "LinkedServiceReference"
							},
							"name": "DimTime"
						},
						{
							"linkedService": {
								"referenceName": "DWH_Hoeve_boveneind",
								"type": "LinkedServiceReference"
							},
							"name": "DimCow"
						}
					],
					"sinks": [],
					"transformations": [
						{
							"name": "CowLookup"
						},
						{
							"name": "DateLookup"
						},
						{
							"name": "TimeLookup"
						},
						{
							"name": "SplitDateTime"
						},
						{
							"name": "NullFilter"
						},
						{
							"name": "activeDBcows"
						},
						{
							"name": "StagingInput"
						},
						{
							"name": "DWHOutput"
						}
					],
					"scriptLines": [
						"input(output(",
						"          animal_id as long,",
						"          quarter as timestamp,",
						"          total_time_lying as integer,",
						"          total_time_standing as integer,",
						"          total_time_walking as integer,",
						"          total_standups as integer,",
						"          total_steps as integer",
						"     ),",
						"     order: 0) ~> StagingInput",
						"source(output(",
						"          dim_date_id as integer,",
						"          date as date,",
						"          day as integer,",
						"          day_name as string,",
						"          week as integer,",
						"          iso_week as integer,",
						"          day_of_week as integer,",
						"          month as integer,",
						"          month_name as string,",
						"          quarter as integer,",
						"          year as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'dim_date',",
						"     schemaName: 'warehouse',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> DimDate",
						"source(output(",
						"          dim_time_id as integer,",
						"          time as timestamp,",
						"          minute as integer,",
						"          hour as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'dim_time',",
						"     schemaName: 'warehouse',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> DimTime",
						"source(output(",
						"          dim_cow_id as integer,",
						"          lifenumber as string,",
						"          leg_responder as long,",
						"          neck_responder as long,",
						"          cownumber as integer,",
						"          nedap_id as long,",
						"          start_date as date,",
						"          end_date as date,",
						"          group as integer,",
						"          last_updated as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'dim_cow',",
						"     schemaName: 'warehouse',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> DimCow",
						"StagingInput, activeDBcows lookup(animal_id == nedap_id,",
						"     multiple: true,",
						"     broadcast: 'right')~> CowLookup",
						"SplitDateTime, DimDate lookup(DateCalc == toString(date),",
						"     multiple: true,",
						"     broadcast: 'right')~> DateLookup",
						"DateLookup, DimTime lookup(TimeCalc == trim(split(toString(time),' ')[2]),",
						"     multiple: true,",
						"     broadcast: 'right')~> TimeLookup",
						"CowLookup derive(DateCalc = trim(split(toString(quarter),' ')[1]),",
						"          TimeCalc = trim(split(toString(quarter),' ')[2])) ~> SplitDateTime",
						"TimeLookup filter(isNull(dim_cow_id) == false() && isNull(dim_date_id) == false() && isNull(dim_time_id) == false()) ~> NullFilter",
						"DimCow filter(isNull(end_date) == true()) ~> activeDBcows",
						"NullFilter output(mapColumn(",
						"          dim_cow_id,",
						"          dim_date_id,",
						"          dim_time_id,",
						"          total_time_lying,",
						"          total_time_standing,",
						"          total_time_walking,",
						"          total_standups,",
						"          total_steps",
						"     )) ~> DWHOutput"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DWH_Hoeve_boveneind')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V2 DWH Lookup Location Flowlet')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Flowlet",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "DWH_Hoeve_boveneind",
								"type": "LinkedServiceReference"
							},
							"name": "DimDate"
						},
						{
							"linkedService": {
								"referenceName": "DWH_Hoeve_boveneind",
								"type": "LinkedServiceReference"
							},
							"name": "DimCow"
						}
					],
					"sinks": [],
					"transformations": [
						{
							"name": "CowLookup"
						},
						{
							"name": "SplitDatetime"
						},
						{
							"name": "DateLookup"
						},
						{
							"name": "Nullfilter"
						},
						{
							"name": "activeDBcows"
						},
						{
							"name": "LocationStaging"
						},
						{
							"name": "CowLocation"
						}
					],
					"scriptLines": [
						"input(output(",
						"          timestamp as timestamp,",
						"          responder as long,",
						"          x as long,",
						"          y as long,",
						"          quality as long",
						"     ),",
						"     order: 0) ~> LocationStaging",
						"source(output(",
						"          dim_date_id as integer,",
						"          date as date,",
						"          day as integer,",
						"          day_name as string,",
						"          week as integer,",
						"          iso_week as integer,",
						"          day_of_week as integer,",
						"          month as integer,",
						"          month_name as string,",
						"          quarter as integer,",
						"          year as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'dim_date',",
						"     schemaName: 'warehouse',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> DimDate",
						"source(output(",
						"          dim_cow_id as integer,",
						"          lifenumber as string,",
						"          leg_responder as long,",
						"          neck_responder as long,",
						"          cownumber as integer,",
						"          start_date as date,",
						"          end_date as date,",
						"          GROUP as integer,",
						"          last_updated as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'dim_cow',",
						"     schemaName: 'warehouse',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> DimCow",
						"LocationStaging, activeDBcows lookup(responder == neck_responder,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> CowLookup",
						"CowLookup derive({date calc} = trim(split(toString(timestamp),' ')[1])) ~> SplitDatetime",
						"SplitDatetime, DimDate lookup({date calc} == toString(date),",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> DateLookup",
						"DateLookup filter(isNull(dim_cow_id) == false() && isNull(dim_date_id) == false()) ~> Nullfilter",
						"DimCow filter(isNull(end_date) == true()) ~> activeDBcows",
						"Nullfilter output(mapColumn(",
						"          each(match(true()))",
						"     )) ~> CowLocation"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DWH_Hoeve_boveneind')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V2 DWH Lookup Milking Flowlet')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Flowlet",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "DWH_Hoeve_boveneind",
								"type": "LinkedServiceReference"
							},
							"name": "DimTime"
						},
						{
							"linkedService": {
								"referenceName": "DWH_Hoeve_boveneind",
								"type": "LinkedServiceReference"
							},
							"name": "DimDate"
						},
						{
							"linkedService": {
								"referenceName": "DWH_Hoeve_boveneind",
								"type": "LinkedServiceReference"
							},
							"name": "DimMilkingCode"
						},
						{
							"linkedService": {
								"referenceName": "DWH_Hoeve_boveneind",
								"type": "LinkedServiceReference"
							},
							"name": "DimCow"
						}
					],
					"sinks": [],
					"transformations": [
						{
							"name": "CowLookup"
						},
						{
							"name": "SplitDatetime"
						},
						{
							"name": "TimeLookup"
						},
						{
							"name": "DateLookup"
						},
						{
							"name": "ErrorCodeLookup"
						},
						{
							"name": "NullFilter"
						},
						{
							"name": "activeDBcows"
						},
						{
							"name": "Milkstaging"
						},
						{
							"name": "CowMilkings"
						}
					],
					"scriptLines": [
						"input(output(",
						"          koenummer as integer,",
						"          lactatienummer as integer,",
						"          {Kwartier geleidbaarheid ruwe waarde rechts achter} as integer,",
						"          {Kwartier geleidbaarheid ruwe waarde links achter} as integer,",
						"          {Kwartier geleidbaarheid ruwe waarde links voor} as integer,",
						"          {Kwartier geleidbaarheid ruwe waarde rechts voor} as integer,",
						"          {Robotbezoek datetime} as timestamp,",
						"          lactatiedagen as integer,",
						"          respondernummer as long,",
						"          {Aantal beker aansluitpogingen rechts achter} as integer,",
						"          {Aantal beker aansluitpogingen links achter} as integer,",
						"          {Aantal beker aansluitpogingen links voor} as integer,",
						"          {Aantal beker aansluitpogingen rechts voor} as integer,",
						"          melkduur as integer,",
						"          {Melkstroomherkenningstijd lv} as integer,",
						"          {Melkstroomherkenningstijd rv} as integer,",
						"          {Melkstroomherkenningstijd la} as integer,",
						"          {Melkstroomherkenningstijd ra} as integer,",
						"          melkhoeveelheid as float,",
						"          {Error code} as integer,",
						"          koeleeftijd as integer,",
						"          {Roodheidsgraad achter rechts} as integer,",
						"          {Roodheidsgraad achter links} as integer,",
						"          {Roodheidsgraad vooraan links} as integer,",
						"          {Roodheidsgraad vooraan rechts} as integer",
						"     ),",
						"     order: 0) ~> Milkstaging",
						"source(output(",
						"          dim_time_id as integer,",
						"          time as timestamp,",
						"          minute as integer,",
						"          hour as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'dim_time',",
						"     schemaName: 'warehouse',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> DimTime",
						"source(output(",
						"          dim_date_id as integer,",
						"          date as date,",
						"          day as integer,",
						"          day_name as string,",
						"          week as integer,",
						"          iso_week as integer,",
						"          day_of_week as integer,",
						"          month as integer,",
						"          month_name as string,",
						"          quarter as integer,",
						"          year as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'dim_date',",
						"     schemaName: 'warehouse',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> DimDate",
						"source(output(",
						"          dim_error_code_id as integer,",
						"          code as integer,",
						"          description as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'dim_milking_code',",
						"     schemaName: 'warehouse',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> DimMilkingCode",
						"source(output(",
						"          dim_cow_id as integer,",
						"          lifenumber as string,",
						"          leg_responder as long,",
						"          neck_responder as long,",
						"          cownumber as integer,",
						"          nedap_id as long,",
						"          start_date as date,",
						"          end_date as date,",
						"          group as integer,",
						"          last_updated as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'dim_cow',",
						"     schemaName: 'warehouse',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> DimCow",
						"Milkstaging, activeDBcows lookup(koenummer == cownumber,",
						"     multiple: true,",
						"     broadcast: 'right',",
						"     pickup: 'any')~> CowLookup",
						"CowLookup derive({time calc} = trim(split(toString({Robotbezoek datetime}),' ')[2]),",
						"          {date calc} = trim(split(toString({Robotbezoek datetime}),' ')[1])) ~> SplitDatetime",
						"SplitDatetime, DimTime lookup({time calc} == trim(split(toString(time),' ')[2]),",
						"     multiple: true,",
						"     broadcast: 'right')~> TimeLookup",
						"TimeLookup, DimDate lookup({date calc} == toString(date),",
						"     multiple: true,",
						"     broadcast: 'right')~> DateLookup",
						"DateLookup, DimMilkingCode lookup({Error code} == code,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'right')~> ErrorCodeLookup",
						"ErrorCodeLookup filter(isNull(dim_cow_id) == false() && isNull(dim_date_id) == false() && isNull(dim_time_id) == false()) ~> NullFilter",
						"DimCow filter(isNull(end_date) == true()) ~> activeDBcows",
						"NullFilter output(mapColumn(",
						"          dim_cow_id,",
						"          dim_error_code_id,",
						"          dim_time_id,",
						"          dim_date_id,",
						"          quarterconductbr = {Kwartier geleidbaarheid ruwe waarde rechts achter},",
						"          quarterconductbl = {Kwartier geleidbaarheid ruwe waarde links achter},",
						"          quarterconductfl = {Kwartier geleidbaarheid ruwe waarde links voor},",
						"          quarterconductfr = {Kwartier geleidbaarheid ruwe waarde rechts voor},",
						"          degreeofrednessbr = {Roodheidsgraad achter rechts},",
						"          degreeofrednessbl = {Roodheidsgraad achter links},",
						"          degreeofrednessfl = {Roodheidsgraad vooraan links},",
						"          degreeofrednessfr = {Roodheidsgraad vooraan rechts},",
						"          nrconnectattemptbr = {Aantal beker aansluitpogingen rechts achter},",
						"          nrconnectattemptbl = {Aantal beker aansluitpogingen links achter},",
						"          nrconnectattemptfl = {Aantal beker aansluitpogingen links voor},",
						"          nrconnectattemptfr = {Aantal beker aansluitpogingen rechts voor},",
						"          milkingtimeudderbr = {Melkstroomherkenningstijd ra},",
						"          milkingtimeudderbl = {Melkstroomherkenningstijd la},",
						"          milkingtimeudderfl = {Melkstroomherkenningstijd lv},",
						"          milkingtimeudderfr = {Melkstroomherkenningstijd rv},",
						"          visitmilkamount = melkhoeveelheid,",
						"          lactationdays = lactatiedagen,",
						"          cowage = koeleeftijd,",
						"          lactationnumer = lactatienummer,",
						"          milkingtimetotal = melkduur",
						"     )) ~> CowMilkings"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DWH_Hoeve_boveneind')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V2 DWH Lookup Neck Activity Flowlet')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Flowlet",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "DWH_Hoeve_boveneind",
								"type": "LinkedServiceReference"
							},
							"name": "DimDate"
						},
						{
							"linkedService": {
								"referenceName": "DWH_Hoeve_boveneind",
								"type": "LinkedServiceReference"
							},
							"name": "DimTime"
						},
						{
							"linkedService": {
								"referenceName": "DWH_Hoeve_boveneind",
								"type": "LinkedServiceReference"
							},
							"name": "DimCow"
						}
					],
					"sinks": [],
					"transformations": [
						{
							"name": "CowLookup"
						},
						{
							"name": "SplitDateTime"
						},
						{
							"name": "dateLookup"
						},
						{
							"name": "timeLookup"
						},
						{
							"name": "filter1"
						},
						{
							"name": "StagingInput"
						},
						{
							"name": "DWHOutput"
						}
					],
					"scriptLines": [
						"input(output(",
						"          animal_id as long,",
						"          quarter as timestamp,",
						"          total as integer",
						"     ),",
						"     order: 0) ~> StagingInput",
						"source(output(",
						"          dim_date_id as integer,",
						"          date as date,",
						"          day as integer,",
						"          day_name as string,",
						"          week as integer,",
						"          iso_week as integer,",
						"          day_of_week as integer,",
						"          month as integer,",
						"          month_name as string,",
						"          quarter as integer,",
						"          year as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'dim_date',",
						"     schemaName: 'warehouse',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> DimDate",
						"source(output(",
						"          dim_time_id as integer,",
						"          time as timestamp,",
						"          minute as integer,",
						"          hour as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'dim_time',",
						"     schemaName: 'warehouse',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> DimTime",
						"source(output(",
						"          dim_cow_id as integer,",
						"          lifenumber as string,",
						"          leg_responder as long,",
						"          neck_responder as long,",
						"          cownumber as integer,",
						"          nedap_id as long,",
						"          start_date as date,",
						"          end_date as date,",
						"          group as integer,",
						"          last_updated as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     tableName: 'dim_cow',",
						"     schemaName: 'warehouse',",
						"     store: 'postgres',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> DimCow",
						"StagingInput, DimCow lookup(animal_id == nedap_id,",
						"     multiple: true,",
						"     broadcast: 'right')~> CowLookup",
						"CowLookup derive(DateCalc = trim(split(toString(quarter),' ')[1]),",
						"          TimeCalc = trim(split(toString(quarter),' ')[2])) ~> SplitDateTime",
						"SplitDateTime, DimDate lookup(DateCalc == toString(date),",
						"     multiple: true,",
						"     broadcast: 'auto')~> dateLookup",
						"dateLookup, DimTime lookup(TimeCalc == trim(split(toString(time),' ')[2]),",
						"     multiple: true,",
						"     broadcast: 'auto')~> timeLookup",
						"timeLookup filter(isNull(dim_cow_id) == false() && isNull(dim_date_id) == false() && isNull(dim_time_id) == false()) ~> filter1",
						"filter1 output(mapColumn(",
						"          total,",
						"          dim_cow_id,",
						"          dim_time_id,",
						"          dim_date_id",
						"     )) ~> DWHOutput"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DWH_Hoeve_boveneind')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V2 Update Cows no update')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Updates the Cow Dim table in the PostGreDWH, by inserting new cows and updating excisting ones with new information while flagging old ones as on",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "view_staging_StagingCowView",
								"type": "DatasetReference"
							},
							"name": "StagingCows"
						},
						{
							"dataset": {
								"referenceName": "table_DWH_dim_cow",
								"type": "DatasetReference"
							},
							"name": "DWHCows"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "table_DWH_dim_cow",
								"type": "DatasetReference"
							},
							"name": "UpdateCowLastUpdated"
						}
					],
					"transformations": [
						{
							"name": "activeDBcows",
							"description": "filter end_dates with a null value"
						},
						{
							"name": "activatecows"
						},
						{
							"name": "CreateDateTimestamp1"
						},
						{
							"name": "CombineApiDimCow"
						},
						{
							"name": "UpdateIfTrue2"
						},
						{
							"name": "NoUpdateAvailable"
						}
					],
					"script": "source(output(\n\t\tid as long,\n\t\tcondition as string,\n\t\tlife_number as string,\n\t\tresponder1 as long,\n\t\tresponder2 as long,\n\t\tresponder3 as string,\n\t\tnumber as integer,\n\t\tuuid as string,\n\t\tgroup_id as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StagingCows\nsource(output(\n\t\tdim_cow_id as integer,\n\t\tlifenumber as string,\n\t\tleg_responder as long,\n\t\tneck_responder as long,\n\t\tcownumber as integer,\n\t\tnedap_id as long,\n\t\tstart_date as date,\n\t\tend_date as date,\n\t\tgroup as integer,\n\t\tlast_updated as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DWHCows\nCreateDateTimestamp1 filter(end_date == toDate('9999-01-01')) ~> activeDBcows\nactiveDBcows, StagingCows exists(lifenumber == life_number,\n\tnegate:false,\n\tbroadcast: 'auto')~> activatecows\nDWHCows derive(current_date = currentDate(),\n\t\tyesterday = addDays(currentDate(),-1),\n\t\tcurrent_timestamp = currentTimestamp(),\n\t\tend_date = toDate('9999-01-01')) ~> CreateDateTimestamp1\nactivatecows, StagingCows join(lifenumber == life_number,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> CombineApiDimCow\nNoUpdateAvailable alterRow(updateIf(true())) ~> UpdateIfTrue2\nCombineApiDimCow filter(leg_responder == responder1 && neck_responder == responder2 && group == group_id && cownumber == number) ~> NoUpdateAvailable\nUpdateIfTrue2 sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tdim_cow_id as integer,\n\t\tlifenumber as string,\n\t\tleg_responder as long,\n\t\tneck_responder as long,\n\t\tcownumber as integer,\n\t\tnedap_id as long,\n\t\tstart_date as date,\n\t\tend_date as date,\n\t\tgroup as integer,\n\t\tlast_updated as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['dim_cow_id'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tdim_cow_id,\n\t\tlifenumber,\n\t\tleg_responder,\n\t\tneck_responder,\n\t\tcownumber,\n\t\tnedap_id,\n\t\tstart_date,\n\t\tend_date,\n\t\tgroup,\n\t\tlast_updated = current_timestamp\n\t)) ~> UpdateCowLastUpdated"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/view_staging_StagingCowView')]",
				"[concat(variables('factoryId'), '/datasets/table_DWH_dim_cow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V2 Update Cows update available end_date')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Updates the Cow Dim table in the PostGreDWH, by inserting new cows and updating excisting ones with new information while flagging old ones as on",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "view_staging_StagingCowView",
								"type": "DatasetReference"
							},
							"name": "StagingCows"
						},
						{
							"dataset": {
								"referenceName": "table_DWH_dim_cow",
								"type": "DatasetReference"
							},
							"name": "DWHCows"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "table_DWH_dim_cow",
								"type": "DatasetReference"
							},
							"name": "SetCowEnddate3"
						}
					],
					"transformations": [
						{
							"name": "activeDBcows",
							"description": "filter end_dates with a null value"
						},
						{
							"name": "activatecows"
						},
						{
							"name": "CreateDateTimestamp1"
						},
						{
							"name": "CombineApiDimCow"
						},
						{
							"name": "UpdateAvailable"
						},
						{
							"name": "AlterRow1"
						}
					],
					"script": "source(output(\n\t\tid as long,\n\t\tcondition as string,\n\t\tlife_number as string,\n\t\tresponder1 as long,\n\t\tresponder2 as long,\n\t\tresponder3 as string,\n\t\tnumber as integer,\n\t\tuuid as string,\n\t\tgroup_id as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StagingCows\nsource(output(\n\t\tdim_cow_id as integer,\n\t\tlifenumber as string,\n\t\tleg_responder as long,\n\t\tneck_responder as long,\n\t\tcownumber as integer,\n\t\tnedap_id as long,\n\t\tstart_date as date,\n\t\tend_date as date,\n\t\tgroup as integer,\n\t\tlast_updated as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DWHCows\nCreateDateTimestamp1 filter(var_end_date == toDate('9999-01-01')) ~> activeDBcows\nactiveDBcows, StagingCows exists(lifenumber == life_number,\n\tnegate:false,\n\tbroadcast: 'auto')~> activatecows\nDWHCows derive(var_current_date = currentDate(),\n\t\tvar_yesterday = addDays(currentDate(),-1),\n\t\tvar_current_timestamp = currentTimestamp(),\n\t\tvar_end_date = toDate('9999-01-01')) ~> CreateDateTimestamp1\nactivatecows, StagingCows join(lifenumber == life_number,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> CombineApiDimCow\nCombineApiDimCow filter(end_date == toDate('9999-01-01') && leg_responder != responder1 || \r\nend_date == toDate('9999-01-01') && neck_responder != responder2 || \r\nend_date == toDate('9999-01-01') && group != group_id || \r\nend_date == toDate('9999-01-01') && cownumber != number) ~> UpdateAvailable\nUpdateAvailable alterRow(updateIf(true())) ~> AlterRow1\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tdim_cow_id as integer,\n\t\tlifenumber as string,\n\t\tleg_responder as long,\n\t\tneck_responder as long,\n\t\tcownumber as integer,\n\t\tnedap_id as long,\n\t\tstart_date as date,\n\t\tend_date as date,\n\t\tgroup as integer,\n\t\tlast_updated as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:true,\n\tkeys:['dim_cow_id'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tdim_cow_id,\n\t\tlifenumber,\n\t\tleg_responder,\n\t\tneck_responder,\n\t\tcownumber,\n\t\tnedap_id,\n\t\tstart_date,\n\t\tend_date = var_yesterday,\n\t\tgroup,\n\t\tlast_updated = var_current_timestamp\n\t)) ~> SetCowEnddate3"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/view_staging_StagingCowView')]",
				"[concat(variables('factoryId'), '/datasets/table_DWH_dim_cow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V2 Update Cows update available set new cow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Updates the Cow Dim table in the PostGreDWH, by inserting new cows and updating excisting ones with new information while flagging old ones as on",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "view_staging_StagingCowView",
								"type": "DatasetReference"
							},
							"name": "StagingCows"
						},
						{
							"dataset": {
								"referenceName": "table_DWH_dim_cow",
								"type": "DatasetReference"
							},
							"name": "DWHCows"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "table_DWH_dim_cow",
								"type": "DatasetReference"
							},
							"name": "SetCowNew3"
						}
					],
					"transformations": [
						{
							"name": "activeDBcows",
							"description": "filter end_dates with a null value"
						},
						{
							"name": "activatecows"
						},
						{
							"name": "CreateDateTimestamp1"
						},
						{
							"name": "CombineApiDimCow"
						},
						{
							"name": "UpdateAvailable"
						}
					],
					"script": "source(output(\n\t\tid as long,\n\t\tcondition as string,\n\t\tlife_number as string,\n\t\tresponder1 as long,\n\t\tresponder2 as long,\n\t\tresponder3 as string,\n\t\tnumber as integer,\n\t\tuuid as string,\n\t\tgroup_id as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StagingCows\nsource(output(\n\t\tdim_cow_id as integer,\n\t\tlifenumber as string,\n\t\tleg_responder as long,\n\t\tneck_responder as long,\n\t\tcownumber as integer,\n\t\tnedap_id as long,\n\t\tstart_date as date,\n\t\tend_date as date,\n\t\tgroup as integer,\n\t\tlast_updated as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DWHCows\nCreateDateTimestamp1 filter(var_end_date == toDate('9999-01-01')) ~> activeDBcows\nactiveDBcows, StagingCows exists(lifenumber == life_number,\n\tnegate:false,\n\tbroadcast: 'auto')~> activatecows\nDWHCows derive(var_current_date = currentDate(),\n\t\tvar_yesterday = addDays(currentDate(),-1),\n\t\tvar_current_timestamp = currentTimestamp(),\n\t\tvar_end_date = toDate('9999-01-01')) ~> CreateDateTimestamp1\nactivatecows, StagingCows join(lifenumber == life_number,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> CombineApiDimCow\nCombineApiDimCow filter(end_date == toDate('9999-01-01') && leg_responder != responder1 || \r\nend_date == toDate('9999-01-01') && neck_responder != responder2 || \r\nend_date == toDate('9999-01-01') && group != group_id || \r\nend_date == toDate('9999-01-01') && cownumber != number) ~> UpdateAvailable\nUpdateAvailable sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tdim_cow_id as integer,\n\t\tlifenumber as string,\n\t\tleg_responder as long,\n\t\tneck_responder as long,\n\t\tcownumber as integer,\n\t\tnedap_id as long,\n\t\tstart_date as date,\n\t\tend_date as date,\n\t\tgroup as integer,\n\t\tlast_updated as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tlifenumber,\n\t\tleg_responder,\n\t\tneck_responder,\n\t\tcownumber,\n\t\tnedap_id,\n\t\tstart_date,\n\t\tend_date = var_end_date,\n\t\tgroup,\n\t\tlast_updated = var_current_timestamp\n\t)) ~> SetCowNew3"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/view_staging_StagingCowView')]",
				"[concat(variables('factoryId'), '/datasets/table_DWH_dim_cow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V2 Update Facts Dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Gets the collected data from the staging and finds the active matching cow from the DWH 'Cow Dim'",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "table_staging_nedapcowactivityneck",
								"type": "DatasetReference"
							},
							"name": "NeckActivityStaging"
						},
						{
							"dataset": {
								"referenceName": "table_staging_nedapcoweating",
								"type": "DatasetReference"
							},
							"name": "EatingStaging"
						},
						{
							"dataset": {
								"referenceName": "table_staging_nedapcowbehaviour",
								"type": "DatasetReference"
							},
							"name": "BehaviourStaging"
						},
						{
							"dataset": {
								"referenceName": "table_staging_geamelkrobot",
								"type": "DatasetReference"
							},
							"name": "MilkingStaging"
						},
						{
							"dataset": {
								"referenceName": "table_staging_nedaplocationdata",
								"type": "DatasetReference"
							},
							"name": "LocationStaging"
						},
						{
							"dataset": {
								"referenceName": "table_staging_nedapcowlying",
								"type": "DatasetReference"
							},
							"name": "lyingStaging"
						},
						{
							"dataset": {
								"referenceName": "table_staging_nedapcowstanding",
								"type": "DatasetReference"
							},
							"name": "StandingStaging"
						},
						{
							"dataset": {
								"referenceName": "table_staging_nedapcowwalking",
								"type": "DatasetReference"
							},
							"name": "WalkingStaging"
						},
						{
							"dataset": {
								"referenceName": "table_staging_nedapcowstandups",
								"type": "DatasetReference"
							},
							"name": "StandupsStaging"
						},
						{
							"dataset": {
								"referenceName": "table_staging_nedapcowsteps",
								"type": "DatasetReference"
							},
							"name": "StepsStaging"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "table_DWH_neck_activity",
								"type": "DatasetReference"
							},
							"name": "NeckActivityDWH",
							"rejectedDataLinkedService": {
								"referenceName": "errorlogblob",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "table_DWH_cow_eating",
								"type": "DatasetReference"
							},
							"name": "EatingDWH",
							"rejectedDataLinkedService": {
								"referenceName": "errorlogblob",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "table_DWH_cow_behaviour",
								"type": "DatasetReference"
							},
							"name": "BehaviourDWH",
							"rejectedDataLinkedService": {
								"referenceName": "errorlogblob",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "table_DWH_cow_milkings",
								"type": "DatasetReference"
							},
							"name": "MilkingDWH",
							"rejectedDataLinkedService": {
								"referenceName": "errorlogblob",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "table_DWH_cow_location",
								"type": "DatasetReference"
							},
							"name": "LocationDWH",
							"rejectedDataLinkedService": {
								"referenceName": "errorlogblob",
								"type": "LinkedServiceReference"
							}
						},
						{
							"dataset": {
								"referenceName": "table_DWH_leg_activity",
								"type": "DatasetReference"
							},
							"name": "LegActivityDWH"
						}
					],
					"transformations": [
						{
							"name": "NeckActivityLookup",
							"flowlet": {
								"referenceName": "V2 DWH Lookup Neck Activity Flowlet",
								"type": "DataFlowReference",
								"parameters": {}
							}
						},
						{
							"name": "EatingLookup",
							"flowlet": {
								"referenceName": "V2 DWH Lookup Eating Flowlet",
								"type": "DataFlowReference",
								"parameters": {}
							}
						},
						{
							"name": "BehaviourLookup",
							"flowlet": {
								"referenceName": "V2 DWH Lookup Behaviour Flowlet",
								"type": "DataFlowReference",
								"parameters": {}
							}
						},
						{
							"name": "MilkingLookup",
							"flowlet": {
								"referenceName": "V2 DWH Lookup Milking Flowlet",
								"type": "DataFlowReference",
								"parameters": {}
							}
						},
						{
							"name": "LocationLookup",
							"flowlet": {
								"referenceName": "V2 DWH Lookup Location Flowlet",
								"type": "DataFlowReference",
								"parameters": {}
							}
						},
						{
							"name": "flowlet1",
							"flowlet": {
								"referenceName": "V2 DWH Lookup Leg Activity Flowlet",
								"type": "DataFlowReference",
								"parameters": {}
							}
						},
						{
							"name": "JoinStanding"
						},
						{
							"name": "joinWalking"
						},
						{
							"name": "JoinStandups"
						},
						{
							"name": "JoinSteps"
						},
						{
							"name": "select"
						}
					],
					"script": "source(output(\n\t\tanimal_id as long,\n\t\tquarter as timestamp,\n\t\ttotal as integer,\n\t\tstatus as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> NeckActivityStaging\nsource(output(\n\t\tanimal_id as long,\n\t\tdate as timestamp,\n\t\ttotal as integer,\n\t\taverage as integer,\n\t\tattention as string,\n\t\tstatus as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> EatingStaging\nsource(output(\n\t\tanimal_id as long,\n\t\tstart_time as timestamp,\n\t\ttype as integer,\n\t\tduration as integer,\n\t\tstatus as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> BehaviourStaging\nsource(output(\n\t\tkoenummer as integer,\n\t\tlactatienummer as integer,\n\t\t{Kwartier geleidbaarheid ruwe waarde rechts achter} as integer,\n\t\t{Kwartier geleidbaarheid ruwe waarde links achter} as integer,\n\t\t{Kwartier geleidbaarheid ruwe waarde links voor} as integer,\n\t\t{Kwartier geleidbaarheid ruwe waarde rechts voor} as integer,\n\t\t{Robotbezoek datetime} as timestamp,\n\t\tlactatiedagen as integer,\n\t\trespondernummer as long,\n\t\t{Aantal beker aansluitpogingen rechts achter} as integer,\n\t\t{Aantal beker aansluitpogingen links achter} as integer,\n\t\t{Aantal beker aansluitpogingen links voor} as integer,\n\t\t{Aantal beker aansluitpogingen rechts voor} as integer,\n\t\tmelkduur as integer,\n\t\t{Melkstroomherkenningstijd lv} as integer,\n\t\t{Melkstroomherkenningstijd rv} as integer,\n\t\t{Melkstroomherkenningstijd la} as integer,\n\t\t{Melkstroomherkenningstijd ra} as integer,\n\t\tmelkhoeveelheid as float,\n\t\t{Error code} as integer,\n\t\tkoeleeftijd as integer,\n\t\t{Roodheidsgraad achter rechts} as integer,\n\t\t{Roodheidsgraad achter links} as integer,\n\t\t{Roodheidsgraad vooraan links} as integer,\n\t\t{Roodheidsgraad vooraan rechts} as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> MilkingStaging\nsource(output(\n\t\ttimestamp as timestamp,\n\t\tresponder as long,\n\t\tx as long,\n\t\ty as long,\n\t\tquality as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> LocationStaging\nsource(output(\n\t\tanimal_id as long,\n\t\tquarter as timestamp,\n\t\ttotal as integer,\n\t\tstatus as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> lyingStaging\nsource(output(\n\t\tanimal_id as long,\n\t\ttotal as integer,\n\t\tquarter as timestamp,\n\t\tstatus as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StandingStaging\nsource(output(\n\t\tanimal_id as long,\n\t\ttotal as integer,\n\t\tquarter as timestamp,\n\t\tstatus as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> WalkingStaging\nsource(output(\n\t\tanimal_id as long,\n\t\ttotal as integer,\n\t\tquarter as timestamp,\n\t\tstatus as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StandupsStaging\nsource(output(\n\t\tanimal_id as long,\n\t\ttotal as integer,\n\t\tquarter as timestamp,\n\t\tstatus as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StepsStaging\nNeckActivityStaging compose(mapColumn(\n\t\tanimal_id,\n\t\tquarter,\n\t\ttotal\n\t),\n\tcomposition: 'V2 DWH Lookup Neck Activity Flowlet') ~> NeckActivityLookup@(DWHOutput)\nEatingStaging compose(mapColumn(\n\t\tanimal_id,\n\t\tdate,\n\t\ttotal,\n\t\taverage,\n\t\tattention\n\t),\n\tcomposition: 'V2 DWH Lookup Eating Flowlet') ~> EatingLookup@(CowEating)\nBehaviourStaging compose(mapColumn(\n\t\tanimal_id,\n\t\tstart_time,\n\t\ttype,\n\t\tduration,\n\t\tstatus\n\t),\n\tcomposition: 'V2 DWH Lookup Behaviour Flowlet') ~> BehaviourLookup@(CowBehaviour)\nMilkingStaging compose(mapColumn(\n\t\tkoenummer,\n\t\tlactatienummer,\n\t\t{Kwartier geleidbaarheid ruwe waarde rechts achter},\n\t\t{Kwartier geleidbaarheid ruwe waarde links achter},\n\t\t{Kwartier geleidbaarheid ruwe waarde links voor},\n\t\t{Kwartier geleidbaarheid ruwe waarde rechts voor},\n\t\t{Robotbezoek datetime},\n\t\tlactatiedagen,\n\t\trespondernummer,\n\t\t{Aantal beker aansluitpogingen rechts achter},\n\t\t{Aantal beker aansluitpogingen links achter},\n\t\t{Aantal beker aansluitpogingen links voor},\n\t\t{Aantal beker aansluitpogingen rechts voor},\n\t\tmelkduur,\n\t\t{Melkstroomherkenningstijd lv},\n\t\t{Melkstroomherkenningstijd rv},\n\t\t{Melkstroomherkenningstijd la},\n\t\t{Melkstroomherkenningstijd ra},\n\t\tmelkhoeveelheid,\n\t\t{Error code},\n\t\tkoeleeftijd,\n\t\t{Roodheidsgraad achter rechts},\n\t\t{Roodheidsgraad achter links},\n\t\t{Roodheidsgraad vooraan links},\n\t\t{Roodheidsgraad vooraan rechts}\n\t),\n\tcomposition: 'V2 DWH Lookup Milking Flowlet') ~> MilkingLookup@(CowMilkings)\nLocationStaging compose(mapColumn(\n\t\ttimestamp,\n\t\tresponder,\n\t\tx,\n\t\ty,\n\t\tquality\n\t),\n\tcomposition: 'V2 DWH Lookup Location Flowlet') ~> LocationLookup@(CowLocation)\nselect compose(mapColumn(\n\t\tanimal_id,\n\t\tquarter,\n\t\ttotal_time_lying,\n\t\ttotal_time_standing,\n\t\ttotal_time_walking,\n\t\ttotal_standups,\n\t\ttotal_steps\n\t),\n\tcomposition: 'V2 DWH Lookup Leg Activity Flowlet') ~> flowlet1@(DWHOutput)\nlyingStaging, StandingStaging join(lyingStaging@animal_id == StandingStaging@animal_id\n\t&& lyingStaging@quarter == StandingStaging@quarter,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinStanding\nJoinStanding, WalkingStaging join(lyingStaging@animal_id == WalkingStaging@animal_id\n\t&& lyingStaging@quarter == WalkingStaging@quarter,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> joinWalking\njoinWalking, StandupsStaging join(lyingStaging@animal_id == StandupsStaging@animal_id\n\t&& lyingStaging@quarter == StandupsStaging@quarter,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinStandups\nJoinStandups, StepsStaging join(lyingStaging@animal_id == StepsStaging@animal_id\n\t&& lyingStaging@quarter == StepsStaging@quarter,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinSteps\nJoinSteps select(mapColumn(\n\t\tanimal_id = lyingStaging@animal_id,\n\t\tquarter = lyingStaging@quarter,\n\t\ttotal_time_lying = lyingStaging@total,\n\t\ttotal_time_standing = StandingStaging@total,\n\t\ttotal_time_walking = WalkingStaging@total,\n\t\ttotal_standups = StandupsStaging@total,\n\t\ttotal_steps = StepsStaging@total\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select\nNeckActivityLookup@DWHOutput sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tdim_cow_id as integer,\n\t\tdim_time_id as integer,\n\t\tdim_date_id as integer,\n\t\ttotal_neck_movements as integer,\n\t\ttotal_time_eating as integer,\n\t\ttotal_time_ruminating as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tbatchSize: 1000,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tdim_cow_id,\n\t\tdim_time_id,\n\t\tdim_date_id,\n\t\ttotal_neck_movements = total\n\t)) ~> NeckActivityDWH\nEatingLookup@CowEating sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tdim_cow_id as integer,\n\t\tdim_time_id as integer,\n\t\tdim_date_id as integer,\n\t\ttotal_eating_time as integer,\n\t\taverage_eating_time as integer,\n\t\tattention_needed as boolean\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tbatchSize: 1000,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tdim_cow_id,\n\t\tdim_time_id,\n\t\tdim_date_id,\n\t\ttotal_eating_time = total,\n\t\taverage_eating_time = average,\n\t\tattention_needed = attention\n\t)) ~> EatingDWH\nBehaviourLookup@CowBehaviour sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tdim_cow_id as integer,\n\t\tdim_time_id as integer,\n\t\tdim_date_id as integer,\n\t\ttype_of_behaviour as integer,\n\t\tduration_behaviour as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tbatchSize: 1000,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tdim_cow_id,\n\t\tdim_time_id,\n\t\tdim_date_id,\n\t\ttype_of_behaviour = type,\n\t\tduration_behaviour = duration\n\t)) ~> BehaviourDWH\nMilkingLookup@CowMilkings sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tdim_cow_id as integer,\n\t\tdim_error_code_id as integer,\n\t\tdim_time_id as integer,\n\t\tdim_date_id as integer,\n\t\tquarterconductbr as integer,\n\t\tquarterconductbl as integer,\n\t\tquarterconductfl as integer,\n\t\tquarterconductfr as integer,\n\t\tdegreeofrednessbr as integer,\n\t\tdegreeofrednessbl as integer,\n\t\tdegreeofrednessfl as integer,\n\t\tdegreeofrednessfr as integer,\n\t\tnrconnectattemptbr as integer,\n\t\tnrconnectattemeptbl as integer,\n\t\tnrconnectattemeptfl as integer,\n\t\tnrconnectattemptfr as integer,\n\t\tmilkingtimeudderbr as integer,\n\t\tmilkingtimeudderbl as integer,\n\t\tmilkingtimeudderfl as integer,\n\t\tmilkingtimeudderfr as integer,\n\t\tvisitmilkamount as double,\n\t\tlactationdays as integer,\n\t\tcowage as integer,\n\t\tlactationnumer as integer,\n\t\tmilkingtimetotal as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tbatchSize: 1000,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tdim_cow_id,\n\t\tdim_error_code_id,\n\t\tdim_time_id,\n\t\tdim_date_id,\n\t\tquarterconductbr,\n\t\tquarterconductbl,\n\t\tquarterconductfl,\n\t\tquarterconductfr,\n\t\tdegreeofrednessbr,\n\t\tdegreeofrednessbl,\n\t\tdegreeofrednessfl,\n\t\tdegreeofrednessfr,\n\t\tnrconnectattemptbr,\n\t\tnrconnectattemeptbl = nrconnectattemptbl,\n\t\tnrconnectattemeptfl = nrconnectattemptfl,\n\t\tnrconnectattemptfr,\n\t\tmilkingtimeudderbr,\n\t\tmilkingtimeudderbl,\n\t\tmilkingtimeudderfl,\n\t\tmilkingtimeudderfr,\n\t\tvisitmilkamount,\n\t\tlactationdays,\n\t\tcowage,\n\t\tlactationnumer,\n\t\tmilkingtimetotal\n\t)) ~> MilkingDWH\nLocationLookup@CowLocation sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tdim_cow_id as integer,\n\t\tdim_date_id as integer,\n\t\ttime as timestamp,\n\t\tx_coordinate as integer,\n\t\ty_coordinate as integer,\n\t\tquality_position as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tbatchSize: 1000,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tdim_cow_id,\n\t\tdim_date_id,\n\t\ttime = timestamp,\n\t\tx_coordinate = x,\n\t\ty_coordinate = y,\n\t\tquality_position = quality\n\t)) ~> LocationDWH\nflowlet1@DWHOutput sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tdim_cow_id as integer,\n\t\tdim_time_id as integer,\n\t\tdim_date_id as integer,\n\t\ttotal_time_lying as integer,\n\t\ttotal_time_standing as integer,\n\t\ttotal_time_walking as integer,\n\t\ttotal_standups as integer,\n\t\ttotal_steps as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> LegActivityDWH"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/V2 DWH Lookup Neck Activity Flowlet')]",
				"[concat(variables('factoryId'), '/dataflows/V2 DWH Lookup Eating Flowlet')]",
				"[concat(variables('factoryId'), '/dataflows/V2 DWH Lookup Behaviour Flowlet')]",
				"[concat(variables('factoryId'), '/dataflows/V2 DWH Lookup Milking Flowlet')]",
				"[concat(variables('factoryId'), '/dataflows/V2 DWH Lookup Location Flowlet')]",
				"[concat(variables('factoryId'), '/dataflows/V2 DWH Lookup Leg Activity Flowlet')]",
				"[concat(variables('factoryId'), '/datasets/table_staging_nedapcowactivityneck')]",
				"[concat(variables('factoryId'), '/datasets/table_staging_nedapcoweating')]",
				"[concat(variables('factoryId'), '/datasets/table_staging_nedapcowbehaviour')]",
				"[concat(variables('factoryId'), '/datasets/table_staging_geamelkrobot')]",
				"[concat(variables('factoryId'), '/datasets/table_staging_nedaplocationdata')]",
				"[concat(variables('factoryId'), '/datasets/table_staging_nedapcowlying')]",
				"[concat(variables('factoryId'), '/datasets/table_staging_nedapcowstanding')]",
				"[concat(variables('factoryId'), '/datasets/table_staging_nedapcowwalking')]",
				"[concat(variables('factoryId'), '/datasets/table_staging_nedapcowstandups')]",
				"[concat(variables('factoryId'), '/datasets/table_staging_nedapcowsteps')]",
				"[concat(variables('factoryId'), '/datasets/table_DWH_neck_activity')]",
				"[concat(variables('factoryId'), '/linkedServices/errorlogblob')]",
				"[concat(variables('factoryId'), '/datasets/table_DWH_cow_eating')]",
				"[concat(variables('factoryId'), '/datasets/table_DWH_cow_behaviour')]",
				"[concat(variables('factoryId'), '/datasets/table_DWH_cow_milkings')]",
				"[concat(variables('factoryId'), '/datasets/table_DWH_cow_location')]",
				"[concat(variables('factoryId'), '/datasets/table_DWH_leg_activity')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V2 Update Facts Dataflow_eating')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Gets the collected data from the staging and finds the active matching cow from the DWH 'Cow Dim'",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "table_staging_nedapcoweating",
								"type": "DatasetReference"
							},
							"name": "EatingStaging"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "table_DWH_cow_eating",
								"type": "DatasetReference"
							},
							"name": "EatingDWH",
							"rejectedDataLinkedService": {
								"referenceName": "errorlogblob",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "EatingLookup",
							"flowlet": {
								"referenceName": "V2 DWH Lookup Eating Flowlet",
								"type": "DataFlowReference",
								"parameters": {}
							}
						}
					],
					"script": "source(output(\n\t\tanimal_id as long,\n\t\tdate as timestamp,\n\t\ttotal as integer,\n\t\taverage as integer,\n\t\tattention as string,\n\t\tstatus as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> EatingStaging\nEatingStaging compose(mapColumn(\n\t\tanimal_id,\n\t\tdate,\n\t\ttotal,\n\t\taverage,\n\t\tattention\n\t),\n\tcomposition: 'V2 DWH Lookup Eating Flowlet') ~> EatingLookup@(CowEating)\nEatingLookup@CowEating sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tdim_cow_id as integer,\n\t\tdim_time_id as integer,\n\t\tdim_date_id as integer,\n\t\ttotal_eating_time as integer,\n\t\taverage_eating_time as integer,\n\t\tattention_needed as boolean\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tbatchSize: 1000,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tdim_cow_id,\n\t\tdim_time_id,\n\t\tdim_date_id,\n\t\ttotal_eating_time = total,\n\t\taverage_eating_time = average,\n\t\tattention_needed = attention\n\t)) ~> EatingDWH"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/V2 DWH Lookup Eating Flowlet')]",
				"[concat(variables('factoryId'), '/datasets/table_staging_nedapcoweating')]",
				"[concat(variables('factoryId'), '/datasets/table_DWH_cow_eating')]",
				"[concat(variables('factoryId'), '/linkedServices/errorlogblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V2 new_cows')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Updates the Cow Dim table in the PostGreDWH, by inserting new cows and updating excisting ones with new information while flagging old ones as on",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "view_staging_StagingCowView",
								"type": "DatasetReference"
							},
							"name": "StagingCows"
						},
						{
							"dataset": {
								"referenceName": "table_DWH_dim_cow",
								"type": "DatasetReference"
							},
							"name": "DWHCows"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "table_DWH_dim_cow",
								"type": "DatasetReference"
							},
							"name": "SetCowNew1"
						}
					],
					"transformations": [
						{
							"name": "activeDBcows",
							"description": "filter end_dates with a null value"
						},
						{
							"name": "NewCowsLookup"
						},
						{
							"name": "CreateDateTimestamp2"
						}
					],
					"script": "source(output(\n\t\tid as long,\n\t\tcondition as string,\n\t\tlife_number as string,\n\t\tresponder1 as long,\n\t\tresponder2 as long,\n\t\tresponder3 as string,\n\t\tnumber as integer,\n\t\tuuid as string,\n\t\tgroup_id as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StagingCows\nsource(output(\n\t\tdim_cow_id as integer,\n\t\tlifenumber as string,\n\t\tleg_responder as long,\n\t\tneck_responder as long,\n\t\tcownumber as integer,\n\t\tnedap_id as long,\n\t\tstart_date as date,\n\t\tend_date as date,\n\t\tgroup as integer,\n\t\tlast_updated as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DWHCows\nDWHCows filter(end_date == toDate('9999-01-01')) ~> activeDBcows\nCreateDateTimestamp2, activeDBcows exists(life_number == lifenumber,\n\tnegate:true,\n\tbroadcast: 'auto')~> NewCowsLookup\nStagingCows derive(current_date = currentDate(),\n\t\tcurrent_timestamp = currentTimestamp(),\n\t\tend_date = toDate('9999-01-01')) ~> CreateDateTimestamp2\nNewCowsLookup sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tdim_cow_id as integer,\n\t\tlifenumber as string,\n\t\tleg_responder as long,\n\t\tneck_responder as long,\n\t\tcownumber as integer,\n\t\tnedap_id as long,\n\t\tstart_date as date,\n\t\tend_date as date,\n\t\tgroup as integer,\n\t\tlast_updated as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tlifenumber = life_number,\n\t\tleg_responder = responder1,\n\t\tneck_responder = responder2,\n\t\tcownumber = number,\n\t\tnedap_id = id,\n\t\tstart_date = current_date,\n\t\tgroup = group_id,\n\t\tlast_updated = current_timestamp,\n\t\tend_date\n\t)) ~> SetCowNew1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/view_staging_StagingCowView')]",
				"[concat(variables('factoryId'), '/datasets/table_DWH_dim_cow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/V2 removed_cows')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Updates the Cow Dim table in the PostGreDWH, by inserting new cows and updating excisting ones with new information while flagging old ones as on",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "view_staging_StagingCowView",
								"type": "DatasetReference"
							},
							"name": "StagingCows"
						},
						{
							"dataset": {
								"referenceName": "table_DWH_dim_cow",
								"type": "DatasetReference"
							},
							"name": "DWHCows"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "table_DWH_dim_cow",
								"type": "DatasetReference"
							},
							"name": "SetCowEnddate1"
						}
					],
					"transformations": [
						{
							"name": "activeDBcows",
							"description": "filter end_dates with a null value"
						},
						{
							"name": "removedcows"
						},
						{
							"name": "CreateDateTimestamp1"
						},
						{
							"name": "UpdateIfTrue1"
						}
					],
					"script": "source(output(\n\t\tid as long,\n\t\tcondition as string,\n\t\tlife_number as string,\n\t\tresponder1 as long,\n\t\tresponder2 as long,\n\t\tresponder3 as string,\n\t\tnumber as integer,\n\t\tuuid as string,\n\t\tgroup_id as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StagingCows\nsource(output(\n\t\tdim_cow_id as integer,\n\t\tlifenumber as string,\n\t\tleg_responder as long,\n\t\tneck_responder as long,\n\t\tcownumber as integer,\n\t\tnedap_id as long,\n\t\tstart_date as date,\n\t\tend_date as date,\n\t\tgroup as integer,\n\t\tlast_updated as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DWHCows\nCreateDateTimestamp1 filter(end_date == toDate('9999-01-01')) ~> activeDBcows\nactiveDBcows, StagingCows exists(lifenumber == life_number,\n\tnegate:true,\n\tbroadcast: 'left')~> removedcows\nDWHCows derive(var_current_date = currentDate(),\n\t\tyesterday = addDays(currentDate(),-1),\n\t\tcurrent_timestamp = currentTimestamp(),\n\t\tend_date = toDate('9999-01-01')) ~> CreateDateTimestamp1\nremovedcows alterRow(updateIf(true())) ~> UpdateIfTrue1\nUpdateIfTrue1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tdim_cow_id as integer,\n\t\tlifenumber as string,\n\t\tleg_responder as long,\n\t\tneck_responder as long,\n\t\tcownumber as integer,\n\t\tnedap_id as long,\n\t\tstart_date as date,\n\t\tend_date as date,\n\t\tgroup as integer,\n\t\tlast_updated as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['dim_cow_id'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tdim_cow_id,\n\t\tlifenumber,\n\t\tleg_responder,\n\t\tneck_responder,\n\t\tcownumber,\n\t\tnedap_id,\n\t\tstart_date,\n\t\tend_date = yesterday,\n\t\tgroup,\n\t\tlast_updated\n\t)) ~> SetCowEnddate1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/view_staging_StagingCowView')]",
				"[concat(variables('factoryId'), '/datasets/table_DWH_dim_cow')]"
			]
		}
	]
}