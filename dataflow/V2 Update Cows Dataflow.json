{
	"name": "V2 Update Cows Dataflow",
	"properties": {
		"description": "Updates the Cow Dim table in the PostGreDWH, by inserting new cows and updating excisting ones with new information while flagging old ones as on",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "view_staging_StagingCowView",
						"type": "DatasetReference"
					},
					"name": "StagingCows"
				},
				{
					"dataset": {
						"referenceName": "table_DWH_dim_cow",
						"type": "DatasetReference"
					},
					"name": "DWHCows"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "table_DWH_dim_cow",
						"type": "DatasetReference"
					},
					"name": "SinkNewCow"
				},
				{
					"dataset": {
						"referenceName": "table_DWH_dim_cow",
						"type": "DatasetReference"
					},
					"name": "SinkUpdateCow"
				},
				{
					"dataset": {
						"referenceName": "table_DWH_dim_cow",
						"type": "DatasetReference"
					},
					"name": "SinkUpdateInactive"
				}
			],
			"transformations": [
				{
					"name": "NullFilter"
				},
				{
					"name": "GetTimestamp"
				},
				{
					"name": "MatchCow"
				},
				{
					"name": "SelectColumn"
				},
				{
					"name": "NewCow"
				},
				{
					"name": "CheckForChange"
				},
				{
					"name": "UpdateCow"
				},
				{
					"name": "FilteredDWHCows"
				},
				{
					"name": "AlterRow1"
				}
			],
			"script": "source(output(\n\t\tid as long,\n\t\tcondition as string,\n\t\tlife_number as string,\n\t\tresponder1 as long,\n\t\tresponder2 as long,\n\t\tresponder3 as string,\n\t\tnumber as integer,\n\t\tuuid as string,\n\t\tgroup_id as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StagingCows\nsource(output(\n\t\tdim_cow_id as integer,\n\t\tlifenumber as string,\n\t\tleg_responder as long,\n\t\tneck_responder as long,\n\t\tcownumber as integer,\n\t\tnedap_id as long,\n\t\tstart_date as date,\n\t\tend_date as date,\n\t\tgroup as integer,\n\t\tlast_updated as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DWHCows\nStagingCows filter(isNull(number) != true() || isNull(id) != true() || isNull(life_number) != true()) ~> NullFilter\nNullFilter derive({change date} = currentDate(),\n\t\t{change timestamp} = currentTimestamp()) ~> GetTimestamp\nGetTimestamp, FilteredDWHCows lookup(id == nedap_id,\n\tmultiple: false,\n\tpickup: 'first',\n\tdesc(end_date, true),\n\tbroadcast: 'auto')~> MatchCow\nMatchCow select(mapColumn(\n\t\tid,\n\t\tcondition,\n\t\tlife_number,\n\t\tresponder1,\n\t\tresponder2,\n\t\tnumber,\n\t\tuuid,\n\t\tgroup_id,\n\t\t{change date},\n\t\t{change timestamp},\n\t\tdim_cow_id,\n\t\tlifenumber,\n\t\tleg_responder,\n\t\tneck_responder,\n\t\tcownumber,\n\t\tnedap_id,\n\t\tstart_date,\n\t\tend_date,\n\t\tgroup,\n\t\tlast_updated\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectColumn\nSelectColumn split(isNull(end_date) == true(),\n\tdisjoint: true) ~> NewCow@(NewCow, UpdateCow)\nNewCow@UpdateCow, FilteredDWHCows exists(NewCow@UpdateCow@nedap_id == DWHCows@nedap_id &&\r\n(\r\n    responder1 != DWHCows@leg_responder\r\n || responder2 != DWHCows@neck_responder\r\n || number != DWHCows@cownumber\r\n || group_id != DWHCows@group\r\n),\n\tnegate:false,\n\tbroadcast: 'both')~> CheckForChange\nCheckForChange alterRow(updateIf(true())) ~> UpdateCow\nDWHCows filter(equals(end_date, toDate('9999-01-01'))) ~> FilteredDWHCows\nCheckForChange alterRow() ~> AlterRow1\nNewCow@NewCow sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tdim_cow_id as integer,\n\t\tlifenumber as string,\n\t\tleg_responder as long,\n\t\tneck_responder as long,\n\t\tcownumber as integer,\n\t\tnedap_id as long,\n\t\tstart_date as date,\n\t\tend_date as date,\n\t\tgroup as integer,\n\t\tlast_updated as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tlifenumber = life_number,\n\t\tleg_responder = responder1,\n\t\tneck_responder = responder2,\n\t\tcownumber = number,\n\t\tnedap_id = id,\n\t\tstart_date = {change date},\n\t\tgroup = group_id,\n\t\tlast_updated = {change timestamp}\n\t)) ~> SinkNewCow\nAlterRow1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tdim_cow_id as integer,\n\t\tlifenumber as string,\n\t\tleg_responder as long,\n\t\tneck_responder as long,\n\t\tcownumber as integer,\n\t\tnedap_id as long,\n\t\tstart_date as date,\n\t\tend_date as date,\n\t\tgroup as integer,\n\t\tlast_updated as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tlifenumber = life_number,\n\t\tcownumber = number,\n\t\tleg_responder = responder1,\n\t\tneck_responder = responder2,\n\t\tstart_date = {change date},\n\t\tnedap_id,\n\t\tgroup = group_id,\n\t\tlast_updated = {change timestamp}\n\t)) ~> SinkUpdateCow\nUpdateCow sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tdim_cow_id as integer,\n\t\tlifenumber as string,\n\t\tleg_responder as long,\n\t\tneck_responder as long,\n\t\tcownumber as integer,\n\t\tnedap_id as long,\n\t\tstart_date as date,\n\t\tend_date as date,\n\t\tgroup as integer,\n\t\tlast_updated as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['dim_cow_id'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tmapColumn(\n\t\tend_date = {change date},\n\t\tlast_updated = {change timestamp},\n\t\tdim_cow_id = id\n\t)) ~> SinkUpdateInactive"
		}
	}
}