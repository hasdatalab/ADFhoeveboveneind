{
	"name": "V2 Update Facts Dataflow_eating",
	"properties": {
		"description": "Gets the collected data from the staging and finds the active matching cow from the DWH 'Cow Dim'",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "table_staging_nedapcowactivityneck",
						"type": "DatasetReference"
					},
					"name": "NeckActivityStaging"
				},
				{
					"dataset": {
						"referenceName": "table_staging_nedapcoweating",
						"type": "DatasetReference"
					},
					"name": "EatingStaging"
				},
				{
					"dataset": {
						"referenceName": "table_staging_nedapcowbehaviour",
						"type": "DatasetReference"
					},
					"name": "BehaviourStaging"
				},
				{
					"dataset": {
						"referenceName": "table_staging_geamelkrobot",
						"type": "DatasetReference"
					},
					"name": "MilkingStaging"
				},
				{
					"dataset": {
						"referenceName": "table_staging_nedaplocationdata",
						"type": "DatasetReference"
					},
					"name": "LocationStaging"
				},
				{
					"dataset": {
						"referenceName": "table_staging_nedapcowlying",
						"type": "DatasetReference"
					},
					"name": "lyingStaging"
				},
				{
					"dataset": {
						"referenceName": "table_staging_nedapcowstanding",
						"type": "DatasetReference"
					},
					"name": "StandingStaging"
				},
				{
					"dataset": {
						"referenceName": "table_staging_nedapcowwalking",
						"type": "DatasetReference"
					},
					"name": "WalkingStaging"
				},
				{
					"dataset": {
						"referenceName": "table_staging_nedapcowstandups",
						"type": "DatasetReference"
					},
					"name": "StandupsStaging"
				},
				{
					"dataset": {
						"referenceName": "table_staging_nedapcowsteps",
						"type": "DatasetReference"
					},
					"name": "StepsStaging"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "table_DWH_neck_activity",
						"type": "DatasetReference"
					},
					"name": "NeckActivityDWH",
					"rejectedDataLinkedService": {
						"referenceName": "errorlogblob",
						"type": "LinkedServiceReference"
					}
				},
				{
					"dataset": {
						"referenceName": "table_DWH_cow_eating",
						"type": "DatasetReference"
					},
					"name": "EatingDWH",
					"rejectedDataLinkedService": {
						"referenceName": "errorlogblob",
						"type": "LinkedServiceReference"
					}
				},
				{
					"dataset": {
						"referenceName": "table_DWH_cow_behaviour",
						"type": "DatasetReference"
					},
					"name": "BehaviourDWH",
					"rejectedDataLinkedService": {
						"referenceName": "errorlogblob",
						"type": "LinkedServiceReference"
					}
				},
				{
					"dataset": {
						"referenceName": "table_DWH_cow_milkings",
						"type": "DatasetReference"
					},
					"name": "MilkingDWH",
					"rejectedDataLinkedService": {
						"referenceName": "errorlogblob",
						"type": "LinkedServiceReference"
					}
				},
				{
					"dataset": {
						"referenceName": "table_DWH_cow_location",
						"type": "DatasetReference"
					},
					"name": "LocationDWH",
					"rejectedDataLinkedService": {
						"referenceName": "errorlogblob",
						"type": "LinkedServiceReference"
					}
				},
				{
					"dataset": {
						"referenceName": "table_DWH_leg_activity",
						"type": "DatasetReference"
					},
					"name": "LegActivityDWH"
				}
			],
			"transformations": [
				{
					"name": "NeckActivityLookup",
					"flowlet": {
						"referenceName": "V2 DWH Lookup Neck Activity Flowlet",
						"type": "DataFlowReference"
					}
				},
				{
					"name": "EatingLookup",
					"flowlet": {
						"referenceName": "V2 DWH Lookup Eating Flowlet",
						"type": "DataFlowReference"
					}
				},
				{
					"name": "BehaviourLookup",
					"flowlet": {
						"referenceName": "V2 DWH Lookup Behaviour Flowlet",
						"type": "DataFlowReference"
					}
				},
				{
					"name": "MilkingLookup",
					"flowlet": {
						"referenceName": "V2 DWH Lookup Milking Flowlet",
						"type": "DataFlowReference"
					}
				},
				{
					"name": "LocationLookup",
					"flowlet": {
						"referenceName": "V2 DWH Lookup Location Flowlet",
						"type": "DataFlowReference"
					}
				},
				{
					"name": "flowlet1",
					"flowlet": {
						"referenceName": "V2 DWH Lookup Leg Activity Flowlet",
						"type": "DataFlowReference"
					}
				},
				{
					"name": "JoinStanding"
				},
				{
					"name": "joinWalking"
				},
				{
					"name": "JoinStandups"
				},
				{
					"name": "JoinSteps"
				},
				{
					"name": "select"
				}
			],
			"script": "source(output(\n\t\tanimal_id as long,\n\t\tquarter as timestamp,\n\t\ttotal as integer,\n\t\tstatus as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> NeckActivityStaging\nsource(output(\n\t\tanimal_id as long,\n\t\tdate as timestamp,\n\t\ttotal as integer,\n\t\taverage as integer,\n\t\tattention as string,\n\t\tstatus as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> EatingStaging\nsource(output(\n\t\tanimal_id as long,\n\t\tstart_time as timestamp,\n\t\ttype as integer,\n\t\tduration as integer,\n\t\tstatus as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> BehaviourStaging\nsource(output(\n\t\tkoenummer as integer,\n\t\tlactatienummer as integer,\n\t\t{Kwartier geleidbaarheid ruwe waarde rechts achter} as integer,\n\t\t{Kwartier geleidbaarheid ruwe waarde links achter} as integer,\n\t\t{Kwartier geleidbaarheid ruwe waarde links voor} as integer,\n\t\t{Kwartier geleidbaarheid ruwe waarde rechts voor} as integer,\n\t\t{Robotbezoek datetime} as timestamp,\n\t\tlactatiedagen as integer,\n\t\trespondernummer as long,\n\t\t{Aantal beker aansluitpogingen rechts achter} as integer,\n\t\t{Aantal beker aansluitpogingen links achter} as integer,\n\t\t{Aantal beker aansluitpogingen links voor} as integer,\n\t\t{Aantal beker aansluitpogingen rechts voor} as integer,\n\t\tmelkduur as integer,\n\t\t{Melkstroomherkenningstijd lv} as integer,\n\t\t{Melkstroomherkenningstijd rv} as integer,\n\t\t{Melkstroomherkenningstijd la} as integer,\n\t\t{Melkstroomherkenningstijd ra} as integer,\n\t\tmelkhoeveelheid as float,\n\t\t{Error code} as integer,\n\t\tkoeleeftijd as integer,\n\t\t{Roodheidsgraad achter rechts} as integer,\n\t\t{Roodheidsgraad achter links} as integer,\n\t\t{Roodheidsgraad vooraan links} as integer,\n\t\t{Roodheidsgraad vooraan rechts} as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> MilkingStaging\nsource(output(\n\t\ttimestamp as timestamp,\n\t\tresponder as long,\n\t\tx as long,\n\t\ty as long,\n\t\tquality as long\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> LocationStaging\nsource(output(\n\t\tanimal_id as long,\n\t\tquarter as timestamp,\n\t\ttotal as integer,\n\t\tstatus as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> lyingStaging\nsource(output(\n\t\tanimal_id as long,\n\t\ttotal as integer,\n\t\tquarter as timestamp,\n\t\tstatus as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StandingStaging\nsource(output(\n\t\tanimal_id as long,\n\t\ttotal as integer,\n\t\tquarter as timestamp,\n\t\tstatus as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> WalkingStaging\nsource(output(\n\t\tanimal_id as long,\n\t\ttotal as integer,\n\t\tquarter as timestamp,\n\t\tstatus as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StandupsStaging\nsource(output(\n\t\tanimal_id as long,\n\t\ttotal as integer,\n\t\tquarter as timestamp,\n\t\tstatus as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StepsStaging\nNeckActivityStaging compose(mapColumn(\n\t\tanimal_id,\n\t\tquarter,\n\t\ttotal\n\t),\n\tcomposition: 'V2 DWH Lookup Neck Activity Flowlet') ~> NeckActivityLookup@(DWHOutput)\nEatingStaging compose(mapColumn(\n\t\tanimal_id,\n\t\tdate,\n\t\ttotal,\n\t\taverage,\n\t\tattention\n\t),\n\tcomposition: 'V2 DWH Lookup Eating Flowlet') ~> EatingLookup@(CowEating)\nBehaviourStaging compose(mapColumn(\n\t\tanimal_id,\n\t\tstart_time,\n\t\ttype,\n\t\tduration,\n\t\tstatus\n\t),\n\tcomposition: 'V2 DWH Lookup Behaviour Flowlet') ~> BehaviourLookup@(CowBehaviour)\nMilkingStaging compose(mapColumn(\n\t\tkoenummer,\n\t\tlactatienummer,\n\t\t{Kwartier geleidbaarheid ruwe waarde rechts achter},\n\t\t{Kwartier geleidbaarheid ruwe waarde links achter},\n\t\t{Kwartier geleidbaarheid ruwe waarde links voor},\n\t\t{Kwartier geleidbaarheid ruwe waarde rechts voor},\n\t\t{Robotbezoek datetime},\n\t\tlactatiedagen,\n\t\trespondernummer,\n\t\t{Aantal beker aansluitpogingen rechts achter},\n\t\t{Aantal beker aansluitpogingen links achter},\n\t\t{Aantal beker aansluitpogingen links voor},\n\t\t{Aantal beker aansluitpogingen rechts voor},\n\t\tmelkduur,\n\t\t{Melkstroomherkenningstijd lv},\n\t\t{Melkstroomherkenningstijd rv},\n\t\t{Melkstroomherkenningstijd la},\n\t\t{Melkstroomherkenningstijd ra},\n\t\tmelkhoeveelheid,\n\t\t{Error code},\n\t\tkoeleeftijd,\n\t\t{Roodheidsgraad achter rechts},\n\t\t{Roodheidsgraad achter links},\n\t\t{Roodheidsgraad vooraan links},\n\t\t{Roodheidsgraad vooraan rechts}\n\t),\n\tcomposition: 'V2 DWH Lookup Milking Flowlet') ~> MilkingLookup@(CowMilkings)\nLocationStaging compose(mapColumn(\n\t\ttimestamp,\n\t\tresponder,\n\t\tx,\n\t\ty,\n\t\tquality\n\t),\n\tcomposition: 'V2 DWH Lookup Location Flowlet') ~> LocationLookup@(CowLocation)\nselect compose(mapColumn(\n\t\tanimal_id,\n\t\tquarter,\n\t\ttotal_time_lying,\n\t\ttotal_time_standing,\n\t\ttotal_time_walking,\n\t\ttotal,\n\t\ttotal_steps\n\t),\n\tcomposition: 'V2 DWH Lookup Leg Activity Flowlet') ~> flowlet1@(DWHOutput)\nlyingStaging, StandingStaging join(lyingStaging@animal_id == StandingStaging@animal_id\n\t&& lyingStaging@quarter == StandingStaging@quarter,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinStanding\nJoinStanding, WalkingStaging join(lyingStaging@animal_id == WalkingStaging@animal_id\n\t&& lyingStaging@quarter == WalkingStaging@quarter,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> joinWalking\njoinWalking, StandupsStaging join(lyingStaging@animal_id == StandupsStaging@animal_id\n\t&& lyingStaging@quarter == StandupsStaging@quarter,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinStandups\nJoinStandups, StepsStaging join(lyingStaging@animal_id == StepsStaging@animal_id\n\t&& lyingStaging@quarter == StepsStaging@quarter,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinSteps\nJoinSteps select(mapColumn(\n\t\tanimal_id = lyingStaging@animal_id,\n\t\tquarter = lyingStaging@quarter,\n\t\ttotal_time_lying = lyingStaging@total,\n\t\ttotal_time_standing = StandingStaging@total,\n\t\ttotal_time_walking = WalkingStaging@total,\n\t\ttotal_standups = StandupsStaging@total,\n\t\ttotal_steps = StepsStaging@total\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> select\nNeckActivityLookup@DWHOutput sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tdim_cow_id as integer,\n\t\tdim_time_id as integer,\n\t\tdim_date_id as integer,\n\t\ttotal_neck_movements as integer,\n\t\ttotal_time_eating as integer,\n\t\ttotal_time_ruminating as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tbatchSize: 1000,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tdim_cow_id,\n\t\tdim_time_id,\n\t\tdim_date_id,\n\t\ttotal_neck_movements = total\n\t)) ~> NeckActivityDWH\nEatingLookup@CowEating sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tdim_cow_id as integer,\n\t\tdim_time_id as integer,\n\t\tdim_date_id as integer,\n\t\ttotal_eating_time as integer,\n\t\taverage_eating_time as integer,\n\t\tattention_needed as boolean\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tbatchSize: 1000,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tdim_cow_id,\n\t\tdim_time_id,\n\t\tdim_date_id,\n\t\ttotal_eating_time = total,\n\t\taverage_eating_time = average,\n\t\tattention_needed = attention\n\t)) ~> EatingDWH\nBehaviourLookup@CowBehaviour sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tdim_cow_id as integer,\n\t\tdim_time_id as integer,\n\t\tdim_date_id as integer,\n\t\ttype_of_behaviour as integer,\n\t\tduration_behaviour as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tbatchSize: 1000,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tdim_cow_id,\n\t\tdim_time_id,\n\t\tdim_date_id,\n\t\ttype_of_behaviour = type,\n\t\tduration_behaviour = duration\n\t)) ~> BehaviourDWH\nMilkingLookup@CowMilkings sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tdim_cow_id as integer,\n\t\tdim_error_code_id as integer,\n\t\tdim_time_id as integer,\n\t\tdim_date_id as integer,\n\t\tquarterconductbr as integer,\n\t\tquarterconductbl as integer,\n\t\tquarterconductfl as integer,\n\t\tquarterconductfr as integer,\n\t\tdegreeofrednessbr as integer,\n\t\tdegreeofrednessbl as integer,\n\t\tdegreeofrednessfl as integer,\n\t\tdegreeofrednessfr as integer,\n\t\tnrconnectattemptbr as integer,\n\t\tnrconnectattemeptbl as integer,\n\t\tnrconnectattemeptfl as integer,\n\t\tnrconnectattemptfr as integer,\n\t\tmilkingtimeudderbr as integer,\n\t\tmilkingtimeudderbl as integer,\n\t\tmilkingtimeudderfl as integer,\n\t\tmilkingtimeudderfr as integer,\n\t\tvisitmilkamount as double,\n\t\tlactationdays as integer,\n\t\tcowage as integer,\n\t\tlactationnumer as integer,\n\t\tmilkingtimetotal as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tbatchSize: 1000,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tdim_cow_id,\n\t\tdim_error_code_id,\n\t\tdim_time_id,\n\t\tdim_date_id,\n\t\tquarterconductbr,\n\t\tquarterconductbl,\n\t\tquarterconductfl,\n\t\tquarterconductfr,\n\t\tdegreeofrednessbr,\n\t\tdegreeofrednessbl,\n\t\tdegreeofrednessfl,\n\t\tdegreeofrednessfr,\n\t\tnrconnectattemptbr,\n\t\tnrconnectattemeptbl = nrconnectattemptbl,\n\t\tnrconnectattemeptfl = nrconnectattemptfl,\n\t\tnrconnectattemptfr,\n\t\tmilkingtimeudderbr,\n\t\tmilkingtimeudderbl,\n\t\tmilkingtimeudderfl,\n\t\tmilkingtimeudderfr,\n\t\tvisitmilkamount,\n\t\tlactationdays,\n\t\tcowage,\n\t\tlactationnumer,\n\t\tmilkingtimetotal\n\t)) ~> MilkingDWH\nLocationLookup@CowLocation sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tdim_cow_id as integer,\n\t\tdim_date_id as integer,\n\t\ttime as timestamp,\n\t\tx_coordinate as integer,\n\t\ty_coordinate as integer,\n\t\tquality_position as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tbatchSize: 1000,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tdim_cow_id,\n\t\tdim_date_id,\n\t\ttime = timestamp,\n\t\tx_coordinate = x,\n\t\ty_coordinate = y,\n\t\tquality_position = quality\n\t)) ~> LocationDWH\nflowlet1@DWHOutput sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tdim_cow_id as integer,\n\t\tdim_time_id as integer,\n\t\tdim_date_id as integer,\n\t\ttotal_time_lying as integer,\n\t\ttotal_time_standing as integer,\n\t\ttotal_time_walking as integer,\n\t\ttotal_standups as integer,\n\t\ttotal_steps as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> LegActivityDWH"
		}
	}
}